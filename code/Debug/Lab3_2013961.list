
Lab3_2013961.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a04  08002a04  00012a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a24  08002a24  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08002a24  08002a24  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a24  08002a24  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a24  08002a24  00012a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a28  08002a28  00012a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08002a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000054  08002a80  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002a80  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009379  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac0  00000000  00000000  000293f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002aeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002b940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ca3  00000000  00000000  0002c2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000badd  00000000  00000000  00042f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082306  00000000  00000000  0004ea38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0d3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002954  00000000  00000000  000d0d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	080029ec 	.word	0x080029ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	080029ec 	.word	0x080029ec

0800014c <is_button0_pressed>:

int button0_flag = 0;
int keyREG0 = IS_RELEASED_KEY;
int keyREG1 = IS_RELEASED_KEY;
int keyREG2 = IS_RELEASED_KEY;
int is_button0_pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button0_flag){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <is_button0_pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d004      	beq.n	8000162 <is_button0_pressed+0x16>
		button0_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <is_button0_pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <is_button0_pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000070 	.word	0x20000070

08000170 <subKeyProcess0>:
void subKeyProcess0(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	button0_flag = 1;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <subKeyProcess0+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	20000070 	.word	0x20000070

08000188 <getKeyInput0>:
void getKeyInput0(){
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	keyREG0 = keyREG1;
 800018c:	4b1f      	ldr	r3, [pc, #124]	; (800020c <getKeyInput0+0x84>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a1f      	ldr	r2, [pc, #124]	; (8000210 <getKeyInput0+0x88>)
 8000192:	6013      	str	r3, [r2, #0]
	keyREG1 = keyREG2;
 8000194:	4b1f      	ldr	r3, [pc, #124]	; (8000214 <getKeyInput0+0x8c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a1c      	ldr	r2, [pc, #112]	; (800020c <getKeyInput0+0x84>)
 800019a:	6013      	str	r3, [r2, #0]
	keyREG2 = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 800019c:	2101      	movs	r1, #1
 800019e:	481e      	ldr	r0, [pc, #120]	; (8000218 <getKeyInput0+0x90>)
 80001a0:	f001 fbe4 	bl	800196c <HAL_GPIO_ReadPin>
 80001a4:	4603      	mov	r3, r0
 80001a6:	461a      	mov	r2, r3
 80001a8:	4b1a      	ldr	r3, [pc, #104]	; (8000214 <getKeyInput0+0x8c>)
 80001aa:	601a      	str	r2, [r3, #0]

	switch(state_button0){
 80001ac:	4b1b      	ldr	r3, [pc, #108]	; (800021c <getKeyInput0+0x94>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	2b0f      	cmp	r3, #15
 80001b2:	d01a      	beq.n	80001ea <getKeyInput0+0x62>
 80001b4:	2b10      	cmp	r3, #16
 80001b6:	d121      	bne.n	80001fc <getKeyInput0+0x74>
		case UNACTIVE:
			if(keyREG0 == keyREG1 && keyREG1 == keyREG2){
 80001b8:	4b15      	ldr	r3, [pc, #84]	; (8000210 <getKeyInput0+0x88>)
 80001ba:	681a      	ldr	r2, [r3, #0]
 80001bc:	4b13      	ldr	r3, [pc, #76]	; (800020c <getKeyInput0+0x84>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d11d      	bne.n	8000200 <getKeyInput0+0x78>
 80001c4:	4b11      	ldr	r3, [pc, #68]	; (800020c <getKeyInput0+0x84>)
 80001c6:	681a      	ldr	r2, [r3, #0]
 80001c8:	4b12      	ldr	r3, [pc, #72]	; (8000214 <getKeyInput0+0x8c>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	429a      	cmp	r2, r3
 80001ce:	d117      	bne.n	8000200 <getKeyInput0+0x78>
				if(keyREG2 == IS_PRESSED_KEY) {
 80001d0:	4b10      	ldr	r3, [pc, #64]	; (8000214 <getKeyInput0+0x8c>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d113      	bne.n	8000200 <getKeyInput0+0x78>
					subKeyProcess0();
 80001d8:	f7ff ffca 	bl	8000170 <subKeyProcess0>
					set_timer0(200);
 80001dc:	20c8      	movs	r0, #200	; 0xc8
 80001de:	f000 fe59 	bl	8000e94 <set_timer0>
					state_button0 = ACTIVE;
 80001e2:	4b0e      	ldr	r3, [pc, #56]	; (800021c <getKeyInput0+0x94>)
 80001e4:	220f      	movs	r2, #15
 80001e6:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 80001e8:	e00a      	b.n	8000200 <getKeyInput0+0x78>
		case ACTIVE:
			if(is_timer0_timeout()){
 80001ea:	f000 fe69 	bl	8000ec0 <is_timer0_timeout>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d007      	beq.n	8000204 <getKeyInput0+0x7c>
				state_button0 = UNACTIVE;
 80001f4:	4b09      	ldr	r3, [pc, #36]	; (800021c <getKeyInput0+0x94>)
 80001f6:	2210      	movs	r2, #16
 80001f8:	601a      	str	r2, [r3, #0]
			}

			break;
 80001fa:	e003      	b.n	8000204 <getKeyInput0+0x7c>
		default:
			break;
 80001fc:	bf00      	nop
 80001fe:	e002      	b.n	8000206 <getKeyInput0+0x7e>
			break;
 8000200:	bf00      	nop
 8000202:	e000      	b.n	8000206 <getKeyInput0+0x7e>
			break;
 8000204:	bf00      	nop
	}

}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000004 	.word	0x20000004
 8000210:	20000000 	.word	0x20000000
 8000214:	20000008 	.word	0x20000008
 8000218:	40010c00 	.word	0x40010c00
 800021c:	20000020 	.word	0x20000020

08000220 <turn_on_led_7seg>:
 *  Created on: Oct 29, 2022
 *      Author: NHAN
 */
#include "led_7_seg.h"

void turn_on_led_7seg(int index){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b03      	cmp	r3, #3
 800022c:	d85e      	bhi.n	80002ec <turn_on_led_7seg+0xcc>
 800022e:	a201      	add	r2, pc, #4	; (adr r2, 8000234 <turn_on_led_7seg+0x14>)
 8000230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000234:	08000245 	.word	0x08000245
 8000238:	0800026f 	.word	0x0800026f
 800023c:	08000299 	.word	0x08000299
 8000240:	080002c3 	.word	0x080002c3
	switch(index){
	case 0:
		HAL_GPIO_WritePin( GPIOB, EN0_Pin, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2108      	movs	r1, #8
 8000248:	4835      	ldr	r0, [pc, #212]	; (8000320 <turn_on_led_7seg+0x100>)
 800024a:	f001 fba6 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN1_Pin, SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2110      	movs	r1, #16
 8000252:	4833      	ldr	r0, [pc, #204]	; (8000320 <turn_on_led_7seg+0x100>)
 8000254:	f001 fba1 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN2_Pin, SET);
 8000258:	2201      	movs	r2, #1
 800025a:	2120      	movs	r1, #32
 800025c:	4830      	ldr	r0, [pc, #192]	; (8000320 <turn_on_led_7seg+0x100>)
 800025e:	f001 fb9c 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN3_Pin, SET);
 8000262:	2201      	movs	r2, #1
 8000264:	2140      	movs	r1, #64	; 0x40
 8000266:	482e      	ldr	r0, [pc, #184]	; (8000320 <turn_on_led_7seg+0x100>)
 8000268:	f001 fb97 	bl	800199a <HAL_GPIO_WritePin>
		break;
 800026c:	e053      	b.n	8000316 <turn_on_led_7seg+0xf6>
	case 1:
		HAL_GPIO_WritePin( GPIOB, EN0_Pin, SET);
 800026e:	2201      	movs	r2, #1
 8000270:	2108      	movs	r1, #8
 8000272:	482b      	ldr	r0, [pc, #172]	; (8000320 <turn_on_led_7seg+0x100>)
 8000274:	f001 fb91 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN1_Pin, RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2110      	movs	r1, #16
 800027c:	4828      	ldr	r0, [pc, #160]	; (8000320 <turn_on_led_7seg+0x100>)
 800027e:	f001 fb8c 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN2_Pin, SET);
 8000282:	2201      	movs	r2, #1
 8000284:	2120      	movs	r1, #32
 8000286:	4826      	ldr	r0, [pc, #152]	; (8000320 <turn_on_led_7seg+0x100>)
 8000288:	f001 fb87 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN3_Pin, SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2140      	movs	r1, #64	; 0x40
 8000290:	4823      	ldr	r0, [pc, #140]	; (8000320 <turn_on_led_7seg+0x100>)
 8000292:	f001 fb82 	bl	800199a <HAL_GPIO_WritePin>
		break;
 8000296:	e03e      	b.n	8000316 <turn_on_led_7seg+0xf6>
	case 2:
		HAL_GPIO_WritePin( GPIOB, EN0_Pin, SET);
 8000298:	2201      	movs	r2, #1
 800029a:	2108      	movs	r1, #8
 800029c:	4820      	ldr	r0, [pc, #128]	; (8000320 <turn_on_led_7seg+0x100>)
 800029e:	f001 fb7c 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN1_Pin, SET);
 80002a2:	2201      	movs	r2, #1
 80002a4:	2110      	movs	r1, #16
 80002a6:	481e      	ldr	r0, [pc, #120]	; (8000320 <turn_on_led_7seg+0x100>)
 80002a8:	f001 fb77 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN2_Pin, RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2120      	movs	r1, #32
 80002b0:	481b      	ldr	r0, [pc, #108]	; (8000320 <turn_on_led_7seg+0x100>)
 80002b2:	f001 fb72 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN3_Pin, SET);
 80002b6:	2201      	movs	r2, #1
 80002b8:	2140      	movs	r1, #64	; 0x40
 80002ba:	4819      	ldr	r0, [pc, #100]	; (8000320 <turn_on_led_7seg+0x100>)
 80002bc:	f001 fb6d 	bl	800199a <HAL_GPIO_WritePin>
		break;
 80002c0:	e029      	b.n	8000316 <turn_on_led_7seg+0xf6>
	case 3:
		HAL_GPIO_WritePin( GPIOB, EN0_Pin, SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	2108      	movs	r1, #8
 80002c6:	4816      	ldr	r0, [pc, #88]	; (8000320 <turn_on_led_7seg+0x100>)
 80002c8:	f001 fb67 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN1_Pin, SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	2110      	movs	r1, #16
 80002d0:	4813      	ldr	r0, [pc, #76]	; (8000320 <turn_on_led_7seg+0x100>)
 80002d2:	f001 fb62 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN2_Pin, SET);
 80002d6:	2201      	movs	r2, #1
 80002d8:	2120      	movs	r1, #32
 80002da:	4811      	ldr	r0, [pc, #68]	; (8000320 <turn_on_led_7seg+0x100>)
 80002dc:	f001 fb5d 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN3_Pin, RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2140      	movs	r1, #64	; 0x40
 80002e4:	480e      	ldr	r0, [pc, #56]	; (8000320 <turn_on_led_7seg+0x100>)
 80002e6:	f001 fb58 	bl	800199a <HAL_GPIO_WritePin>
		break;
 80002ea:	e014      	b.n	8000316 <turn_on_led_7seg+0xf6>
	default:
		HAL_GPIO_WritePin( GPIOB, EN0_Pin, SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	2108      	movs	r1, #8
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <turn_on_led_7seg+0x100>)
 80002f2:	f001 fb52 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN1_Pin, SET);
 80002f6:	2201      	movs	r2, #1
 80002f8:	2110      	movs	r1, #16
 80002fa:	4809      	ldr	r0, [pc, #36]	; (8000320 <turn_on_led_7seg+0x100>)
 80002fc:	f001 fb4d 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN2_Pin, SET);
 8000300:	2201      	movs	r2, #1
 8000302:	2120      	movs	r1, #32
 8000304:	4806      	ldr	r0, [pc, #24]	; (8000320 <turn_on_led_7seg+0x100>)
 8000306:	f001 fb48 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN3_Pin, SET);
 800030a:	2201      	movs	r2, #1
 800030c:	2140      	movs	r1, #64	; 0x40
 800030e:	4804      	ldr	r0, [pc, #16]	; (8000320 <turn_on_led_7seg+0x100>)
 8000310:	f001 fb43 	bl	800199a <HAL_GPIO_WritePin>
		break;
 8000314:	bf00      	nop
	}
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40010c00 	.word	0x40010c00

08000324 <display_led_7seg>:


void display_led_7seg(int number){
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2b09      	cmp	r3, #9
 8000330:	f200 81b2 	bhi.w	8000698 <display_led_7seg+0x374>
 8000334:	a201      	add	r2, pc, #4	; (adr r2, 800033c <display_led_7seg+0x18>)
 8000336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800033a:	bf00      	nop
 800033c:	08000365 	.word	0x08000365
 8000340:	080003b7 	.word	0x080003b7
 8000344:	08000409 	.word	0x08000409
 8000348:	0800045b 	.word	0x0800045b
 800034c:	080004ad 	.word	0x080004ad
 8000350:	080004ff 	.word	0x080004ff
 8000354:	08000551 	.word	0x08000551
 8000358:	080005a3 	.word	0x080005a3
 800035c:	080005f5 	.word	0x080005f5
 8000360:	08000647 	.word	0x08000647
	switch(number){
	case 0:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2140      	movs	r1, #64	; 0x40
 8000368:	48ce      	ldr	r0, [pc, #824]	; (80006a4 <display_led_7seg+0x380>)
 800036a:	f001 fb16 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2180      	movs	r1, #128	; 0x80
 8000372:	48cc      	ldr	r0, [pc, #816]	; (80006a4 <display_led_7seg+0x380>)
 8000374:	f001 fb11 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800037e:	48c9      	ldr	r0, [pc, #804]	; (80006a4 <display_led_7seg+0x380>)
 8000380:	f001 fb0b 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	f44f 7100 	mov.w	r1, #512	; 0x200
 800038a:	48c6      	ldr	r0, [pc, #792]	; (80006a4 <display_led_7seg+0x380>)
 800038c:	f001 fb05 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000396:	48c3      	ldr	r0, [pc, #780]	; (80006a4 <display_led_7seg+0x380>)
 8000398:	f001 faff 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003a2:	48c0      	ldr	r0, [pc, #768]	; (80006a4 <display_led_7seg+0x380>)
 80003a4:	f001 faf9 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ae:	48bd      	ldr	r0, [pc, #756]	; (80006a4 <display_led_7seg+0x380>)
 80003b0:	f001 faf3 	bl	800199a <HAL_GPIO_WritePin>
		break;
 80003b4:	e171      	b.n	800069a <display_led_7seg+0x376>
	case 1:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2140      	movs	r1, #64	; 0x40
 80003ba:	48ba      	ldr	r0, [pc, #744]	; (80006a4 <display_led_7seg+0x380>)
 80003bc:	f001 faed 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2180      	movs	r1, #128	; 0x80
 80003c4:	48b7      	ldr	r0, [pc, #732]	; (80006a4 <display_led_7seg+0x380>)
 80003c6:	f001 fae8 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d0:	48b4      	ldr	r0, [pc, #720]	; (80006a4 <display_led_7seg+0x380>)
 80003d2:	f001 fae2 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003dc:	48b1      	ldr	r0, [pc, #708]	; (80006a4 <display_led_7seg+0x380>)
 80003de:	f001 fadc 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 80003e2:	2201      	movs	r2, #1
 80003e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e8:	48ae      	ldr	r0, [pc, #696]	; (80006a4 <display_led_7seg+0x380>)
 80003ea:	f001 fad6 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003f4:	48ab      	ldr	r0, [pc, #684]	; (80006a4 <display_led_7seg+0x380>)
 80003f6:	f001 fad0 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000400:	48a8      	ldr	r0, [pc, #672]	; (80006a4 <display_led_7seg+0x380>)
 8000402:	f001 faca 	bl	800199a <HAL_GPIO_WritePin>
		break;
 8000406:	e148      	b.n	800069a <display_led_7seg+0x376>
	case 2:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	48a5      	ldr	r0, [pc, #660]	; (80006a4 <display_led_7seg+0x380>)
 800040e:	f001 fac4 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	2180      	movs	r1, #128	; 0x80
 8000416:	48a3      	ldr	r0, [pc, #652]	; (80006a4 <display_led_7seg+0x380>)
 8000418:	f001 fabf 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, SET);
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000422:	48a0      	ldr	r0, [pc, #640]	; (80006a4 <display_led_7seg+0x380>)
 8000424:	f001 fab9 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800042e:	489d      	ldr	r0, [pc, #628]	; (80006a4 <display_led_7seg+0x380>)
 8000430:	f001 fab3 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800043a:	489a      	ldr	r0, [pc, #616]	; (80006a4 <display_led_7seg+0x380>)
 800043c:	f001 faad 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, SET);
 8000440:	2201      	movs	r2, #1
 8000442:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000446:	4897      	ldr	r0, [pc, #604]	; (80006a4 <display_led_7seg+0x380>)
 8000448:	f001 faa7 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000452:	4894      	ldr	r0, [pc, #592]	; (80006a4 <display_led_7seg+0x380>)
 8000454:	f001 faa1 	bl	800199a <HAL_GPIO_WritePin>
		break;
 8000458:	e11f      	b.n	800069a <display_led_7seg+0x376>
	case 3:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	2140      	movs	r1, #64	; 0x40
 800045e:	4891      	ldr	r0, [pc, #580]	; (80006a4 <display_led_7seg+0x380>)
 8000460:	f001 fa9b 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	2180      	movs	r1, #128	; 0x80
 8000468:	488e      	ldr	r0, [pc, #568]	; (80006a4 <display_led_7seg+0x380>)
 800046a:	f001 fa96 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000474:	488b      	ldr	r0, [pc, #556]	; (80006a4 <display_led_7seg+0x380>)
 8000476:	f001 fa90 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000480:	4888      	ldr	r0, [pc, #544]	; (80006a4 <display_led_7seg+0x380>)
 8000482:	f001 fa8a 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 8000486:	2201      	movs	r2, #1
 8000488:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800048c:	4885      	ldr	r0, [pc, #532]	; (80006a4 <display_led_7seg+0x380>)
 800048e:	f001 fa84 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, SET);
 8000492:	2201      	movs	r2, #1
 8000494:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000498:	4882      	ldr	r0, [pc, #520]	; (80006a4 <display_led_7seg+0x380>)
 800049a:	f001 fa7e 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a4:	487f      	ldr	r0, [pc, #508]	; (80006a4 <display_led_7seg+0x380>)
 80004a6:	f001 fa78 	bl	800199a <HAL_GPIO_WritePin>
		break;
 80004aa:	e0f6      	b.n	800069a <display_led_7seg+0x376>
	case 4:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	2140      	movs	r1, #64	; 0x40
 80004b0:	487c      	ldr	r0, [pc, #496]	; (80006a4 <display_led_7seg+0x380>)
 80004b2:	f001 fa72 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	487a      	ldr	r0, [pc, #488]	; (80006a4 <display_led_7seg+0x380>)
 80004bc:	f001 fa6d 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c6:	4877      	ldr	r0, [pc, #476]	; (80006a4 <display_led_7seg+0x380>)
 80004c8:	f001 fa67 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d2:	4874      	ldr	r0, [pc, #464]	; (80006a4 <display_led_7seg+0x380>)
 80004d4:	f001 fa61 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004de:	4871      	ldr	r0, [pc, #452]	; (80006a4 <display_led_7seg+0x380>)
 80004e0:	f001 fa5b 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ea:	486e      	ldr	r0, [pc, #440]	; (80006a4 <display_led_7seg+0x380>)
 80004ec:	f001 fa55 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f6:	486b      	ldr	r0, [pc, #428]	; (80006a4 <display_led_7seg+0x380>)
 80004f8:	f001 fa4f 	bl	800199a <HAL_GPIO_WritePin>
		break;
 80004fc:	e0cd      	b.n	800069a <display_led_7seg+0x376>
	case 5:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2140      	movs	r1, #64	; 0x40
 8000502:	4868      	ldr	r0, [pc, #416]	; (80006a4 <display_led_7seg+0x380>)
 8000504:	f001 fa49 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, SET);
 8000508:	2201      	movs	r2, #1
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	4865      	ldr	r0, [pc, #404]	; (80006a4 <display_led_7seg+0x380>)
 800050e:	f001 fa44 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000518:	4862      	ldr	r0, [pc, #392]	; (80006a4 <display_led_7seg+0x380>)
 800051a:	f001 fa3e 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000524:	485f      	ldr	r0, [pc, #380]	; (80006a4 <display_led_7seg+0x380>)
 8000526:	f001 fa38 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 800052a:	2201      	movs	r2, #1
 800052c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000530:	485c      	ldr	r0, [pc, #368]	; (80006a4 <display_led_7seg+0x380>)
 8000532:	f001 fa32 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800053c:	4859      	ldr	r0, [pc, #356]	; (80006a4 <display_led_7seg+0x380>)
 800053e:	f001 fa2c 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000548:	4856      	ldr	r0, [pc, #344]	; (80006a4 <display_led_7seg+0x380>)
 800054a:	f001 fa26 	bl	800199a <HAL_GPIO_WritePin>
		break;
 800054e:	e0a4      	b.n	800069a <display_led_7seg+0x376>
	case 6:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2140      	movs	r1, #64	; 0x40
 8000554:	4853      	ldr	r0, [pc, #332]	; (80006a4 <display_led_7seg+0x380>)
 8000556:	f001 fa20 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	4851      	ldr	r0, [pc, #324]	; (80006a4 <display_led_7seg+0x380>)
 8000560:	f001 fa1b 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056a:	484e      	ldr	r0, [pc, #312]	; (80006a4 <display_led_7seg+0x380>)
 800056c:	f001 fa15 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000576:	484b      	ldr	r0, [pc, #300]	; (80006a4 <display_led_7seg+0x380>)
 8000578:	f001 fa0f 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000582:	4848      	ldr	r0, [pc, #288]	; (80006a4 <display_led_7seg+0x380>)
 8000584:	f001 fa09 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800058e:	4845      	ldr	r0, [pc, #276]	; (80006a4 <display_led_7seg+0x380>)
 8000590:	f001 fa03 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059a:	4842      	ldr	r0, [pc, #264]	; (80006a4 <display_led_7seg+0x380>)
 800059c:	f001 f9fd 	bl	800199a <HAL_GPIO_WritePin>
		break;
 80005a0:	e07b      	b.n	800069a <display_led_7seg+0x376>
	case 7:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2140      	movs	r1, #64	; 0x40
 80005a6:	483f      	ldr	r0, [pc, #252]	; (80006a4 <display_led_7seg+0x380>)
 80005a8:	f001 f9f7 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2180      	movs	r1, #128	; 0x80
 80005b0:	483c      	ldr	r0, [pc, #240]	; (80006a4 <display_led_7seg+0x380>)
 80005b2:	f001 f9f2 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005bc:	4839      	ldr	r0, [pc, #228]	; (80006a4 <display_led_7seg+0x380>)
 80005be:	f001 f9ec 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c8:	4836      	ldr	r0, [pc, #216]	; (80006a4 <display_led_7seg+0x380>)
 80005ca:	f001 f9e6 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d4:	4833      	ldr	r0, [pc, #204]	; (80006a4 <display_led_7seg+0x380>)
 80005d6:	f001 f9e0 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e0:	4830      	ldr	r0, [pc, #192]	; (80006a4 <display_led_7seg+0x380>)
 80005e2:	f001 f9da 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ec:	482d      	ldr	r0, [pc, #180]	; (80006a4 <display_led_7seg+0x380>)
 80005ee:	f001 f9d4 	bl	800199a <HAL_GPIO_WritePin>
		break;
 80005f2:	e052      	b.n	800069a <display_led_7seg+0x376>
	case 8:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2140      	movs	r1, #64	; 0x40
 80005f8:	482a      	ldr	r0, [pc, #168]	; (80006a4 <display_led_7seg+0x380>)
 80005fa:	f001 f9ce 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	4828      	ldr	r0, [pc, #160]	; (80006a4 <display_led_7seg+0x380>)
 8000604:	f001 f9c9 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060e:	4825      	ldr	r0, [pc, #148]	; (80006a4 <display_led_7seg+0x380>)
 8000610:	f001 f9c3 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061a:	4822      	ldr	r0, [pc, #136]	; (80006a4 <display_led_7seg+0x380>)
 800061c:	f001 f9bd 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000626:	481f      	ldr	r0, [pc, #124]	; (80006a4 <display_led_7seg+0x380>)
 8000628:	f001 f9b7 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000632:	481c      	ldr	r0, [pc, #112]	; (80006a4 <display_led_7seg+0x380>)
 8000634:	f001 f9b1 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063e:	4819      	ldr	r0, [pc, #100]	; (80006a4 <display_led_7seg+0x380>)
 8000640:	f001 f9ab 	bl	800199a <HAL_GPIO_WritePin>
		break;
 8000644:	e029      	b.n	800069a <display_led_7seg+0x376>
	case 9:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2140      	movs	r1, #64	; 0x40
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <display_led_7seg+0x380>)
 800064c:	f001 f9a5 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	4813      	ldr	r0, [pc, #76]	; (80006a4 <display_led_7seg+0x380>)
 8000656:	f001 f9a0 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000660:	4810      	ldr	r0, [pc, #64]	; (80006a4 <display_led_7seg+0x380>)
 8000662:	f001 f99a 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <display_led_7seg+0x380>)
 800066e:	f001 f994 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000678:	480a      	ldr	r0, [pc, #40]	; (80006a4 <display_led_7seg+0x380>)
 800067a:	f001 f98e 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <display_led_7seg+0x380>)
 8000686:	f001 f988 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <display_led_7seg+0x380>)
 8000692:	f001 f982 	bl	800199a <HAL_GPIO_WritePin>
		break;
 8000696:	e000      	b.n	800069a <display_led_7seg+0x376>
	default:
		break;
 8000698:	bf00      	nop
	}
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40010800 	.word	0x40010800

080006a8 <update_buffer_led_7seg>:

//number1 will update buffer[0] and buffer[1]
//number2 will update buffer[2] and buffer[3]
void update_buffer_led_7seg(int number1, int number2){
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
	if(number1>=0  && number1 < 10){
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db09      	blt.n	80006cc <update_buffer_led_7seg+0x24>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b09      	cmp	r3, #9
 80006bc:	dc06      	bgt.n	80006cc <update_buffer_led_7seg+0x24>
		led_7_seg_buffer[0] = 0;
 80006be:	4b29      	ldr	r3, [pc, #164]	; (8000764 <update_buffer_led_7seg+0xbc>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
		led_7_seg_buffer[1] = number1;
 80006c4:	4a27      	ldr	r2, [pc, #156]	; (8000764 <update_buffer_led_7seg+0xbc>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6053      	str	r3, [r2, #4]
 80006ca:	e01c      	b.n	8000706 <update_buffer_led_7seg+0x5e>
	}
	else if(number1 >= 10 && number1 <100 ){
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b09      	cmp	r3, #9
 80006d0:	dd19      	ble.n	8000706 <update_buffer_led_7seg+0x5e>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b63      	cmp	r3, #99	; 0x63
 80006d6:	dc16      	bgt.n	8000706 <update_buffer_led_7seg+0x5e>
		led_7_seg_buffer[0] = number1/10;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a23      	ldr	r2, [pc, #140]	; (8000768 <update_buffer_led_7seg+0xc0>)
 80006dc:	fb82 1203 	smull	r1, r2, r2, r3
 80006e0:	1092      	asrs	r2, r2, #2
 80006e2:	17db      	asrs	r3, r3, #31
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <update_buffer_led_7seg+0xbc>)
 80006e8:	6013      	str	r3, [r2, #0]
		led_7_seg_buffer[1] = number1%10;
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <update_buffer_led_7seg+0xc0>)
 80006ee:	fb83 2301 	smull	r2, r3, r3, r1
 80006f2:	109a      	asrs	r2, r3, #2
 80006f4:	17cb      	asrs	r3, r1, #31
 80006f6:	1ad2      	subs	r2, r2, r3
 80006f8:	4613      	mov	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4413      	add	r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	1aca      	subs	r2, r1, r3
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <update_buffer_led_7seg+0xbc>)
 8000704:	605a      	str	r2, [r3, #4]
	}

	if(number2>=0  && number2 < 10){
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db09      	blt.n	8000720 <update_buffer_led_7seg+0x78>
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	2b09      	cmp	r3, #9
 8000710:	dc06      	bgt.n	8000720 <update_buffer_led_7seg+0x78>
			led_7_seg_buffer[2] = 0;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <update_buffer_led_7seg+0xbc>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
			led_7_seg_buffer[3] = number2;
 8000718:	4a12      	ldr	r2, [pc, #72]	; (8000764 <update_buffer_led_7seg+0xbc>)
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	60d3      	str	r3, [r2, #12]
	}
	else if(number2 >= 10 && number2 <100 ){
			led_7_seg_buffer[2] = number2/10;
			led_7_seg_buffer[3] = number2%10;
	}
}
 800071e:	e01c      	b.n	800075a <update_buffer_led_7seg+0xb2>
	else if(number2 >= 10 && number2 <100 ){
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	2b09      	cmp	r3, #9
 8000724:	dd19      	ble.n	800075a <update_buffer_led_7seg+0xb2>
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	2b63      	cmp	r3, #99	; 0x63
 800072a:	dc16      	bgt.n	800075a <update_buffer_led_7seg+0xb2>
			led_7_seg_buffer[2] = number2/10;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <update_buffer_led_7seg+0xc0>)
 8000730:	fb82 1203 	smull	r1, r2, r2, r3
 8000734:	1092      	asrs	r2, r2, #2
 8000736:	17db      	asrs	r3, r3, #31
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <update_buffer_led_7seg+0xbc>)
 800073c:	6093      	str	r3, [r2, #8]
			led_7_seg_buffer[3] = number2%10;
 800073e:	6839      	ldr	r1, [r7, #0]
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <update_buffer_led_7seg+0xc0>)
 8000742:	fb83 2301 	smull	r2, r3, r3, r1
 8000746:	109a      	asrs	r2, r3, #2
 8000748:	17cb      	asrs	r3, r1, #31
 800074a:	1ad2      	subs	r2, r2, r3
 800074c:	4613      	mov	r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	4413      	add	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	1aca      	subs	r2, r1, r3
 8000756:	4b03      	ldr	r3, [pc, #12]	; (8000764 <update_buffer_led_7seg+0xbc>)
 8000758:	60da      	str	r2, [r3, #12]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	20000024 	.word	0x20000024
 8000768:	66666667 	.word	0x66666667

0800076c <led_7seg_run>:

void led_7seg_run(){
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	// enable the ENi pin ( when index = 0, EN0 = RESET ...);
	turn_on_led_7seg(index_led_7_seg);
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <led_7seg_run+0x4c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fd53 	bl	8000220 <turn_on_led_7seg>
	display_led_7seg(led_7_seg_buffer[index_led_7_seg]);
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <led_7seg_run+0x4c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <led_7seg_run+0x50>)
 8000780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fdcd 	bl	8000324 <display_led_7seg>



	//switch index after 500ms, index increase 1 and index assign 0 when index = 4;
	if(is_timer1_timeout()){
 800078a:	f000 fbc1 	bl	8000f10 <is_timer1_timeout>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00e      	beq.n	80007b2 <led_7seg_run+0x46>
		set_timer1(100);
 8000794:	2064      	movs	r0, #100	; 0x64
 8000796:	f000 fba5 	bl	8000ee4 <set_timer1>
		index_led_7_seg = (index_led_7_seg+1)%4;
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <led_7seg_run+0x4c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	425a      	negs	r2, r3
 80007a2:	f003 0303 	and.w	r3, r3, #3
 80007a6:	f002 0203 	and.w	r2, r2, #3
 80007aa:	bf58      	it	pl
 80007ac:	4253      	negpl	r3, r2
 80007ae:	4a02      	ldr	r2, [pc, #8]	; (80007b8 <led_7seg_run+0x4c>)
 80007b0:	6013      	str	r3, [r2, #0]
	}



}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000078 	.word	0x20000078
 80007bc:	20000024 	.word	0x20000024

080007c0 <turn_on_led_traffic1_in_state>:
 *      Author: NHAN
 */
#include <led_traffic.h>


void turn_on_led_traffic1_in_state(){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	switch(state_led_traffic_1){
 80007c4:	4b28      	ldr	r3, [pc, #160]	; (8000868 <turn_on_led_traffic1_in_state+0xa8>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	3b0b      	subs	r3, #11
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	d849      	bhi.n	8000862 <turn_on_led_traffic1_in_state+0xa2>
 80007ce:	a201      	add	r2, pc, #4	; (adr r2, 80007d4 <turn_on_led_traffic1_in_state+0x14>)
 80007d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d4:	080007e5 	.word	0x080007e5
 80007d8:	08000803 	.word	0x08000803
 80007dc:	08000823 	.word	0x08000823
 80007e0:	08000843 	.word	0x08000843
	case OFF:
		HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2101      	movs	r1, #1
 80007e8:	4820      	ldr	r0, [pc, #128]	; (800086c <turn_on_led_traffic1_in_state+0xac>)
 80007ea:	f001 f8d6 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	2102      	movs	r1, #2
 80007f2:	481e      	ldr	r0, [pc, #120]	; (800086c <turn_on_led_traffic1_in_state+0xac>)
 80007f4:	f001 f8d1 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2104      	movs	r1, #4
 80007fc:	481b      	ldr	r0, [pc, #108]	; (800086c <turn_on_led_traffic1_in_state+0xac>)
 80007fe:	f001 f8cc 	bl	800199a <HAL_GPIO_WritePin>
	case RED:
		HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2101      	movs	r1, #1
 8000806:	4819      	ldr	r0, [pc, #100]	; (800086c <turn_on_led_traffic1_in_state+0xac>)
 8000808:	f001 f8c7 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2102      	movs	r1, #2
 8000810:	4816      	ldr	r0, [pc, #88]	; (800086c <turn_on_led_traffic1_in_state+0xac>)
 8000812:	f001 f8c2 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, SET);
 8000816:	2201      	movs	r2, #1
 8000818:	2104      	movs	r1, #4
 800081a:	4814      	ldr	r0, [pc, #80]	; (800086c <turn_on_led_traffic1_in_state+0xac>)
 800081c:	f001 f8bd 	bl	800199a <HAL_GPIO_WritePin>
		break;
 8000820:	e020      	b.n	8000864 <turn_on_led_traffic1_in_state+0xa4>
	case YELLOW:
		HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2101      	movs	r1, #1
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <turn_on_led_traffic1_in_state+0xac>)
 8000828:	f001 f8b7 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2102      	movs	r1, #2
 8000830:	480e      	ldr	r0, [pc, #56]	; (800086c <turn_on_led_traffic1_in_state+0xac>)
 8000832:	f001 f8b2 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, SET);
 8000836:	2201      	movs	r2, #1
 8000838:	2104      	movs	r1, #4
 800083a:	480c      	ldr	r0, [pc, #48]	; (800086c <turn_on_led_traffic1_in_state+0xac>)
 800083c:	f001 f8ad 	bl	800199a <HAL_GPIO_WritePin>
		break;
 8000840:	e010      	b.n	8000864 <turn_on_led_traffic1_in_state+0xa4>
	case GREEN:
		HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, SET);
 8000842:	2201      	movs	r2, #1
 8000844:	2101      	movs	r1, #1
 8000846:	4809      	ldr	r0, [pc, #36]	; (800086c <turn_on_led_traffic1_in_state+0xac>)
 8000848:	f001 f8a7 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2102      	movs	r1, #2
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <turn_on_led_traffic1_in_state+0xac>)
 8000852:	f001 f8a2 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2104      	movs	r1, #4
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <turn_on_led_traffic1_in_state+0xac>)
 800085c:	f001 f89d 	bl	800199a <HAL_GPIO_WritePin>
		break;
 8000860:	e000      	b.n	8000864 <turn_on_led_traffic1_in_state+0xa4>
	default:
		break;
 8000862:	bf00      	nop

	}
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000018 	.word	0x20000018
 800086c:	40010800 	.word	0x40010800

08000870 <turn_on_led_traffic2_in_state>:

void turn_on_led_traffic2_in_state(){
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	switch(state_led_traffic_2){
 8000874:	4b28      	ldr	r3, [pc, #160]	; (8000918 <turn_on_led_traffic2_in_state+0xa8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	3b0b      	subs	r3, #11
 800087a:	2b03      	cmp	r3, #3
 800087c:	d849      	bhi.n	8000912 <turn_on_led_traffic2_in_state+0xa2>
 800087e:	a201      	add	r2, pc, #4	; (adr r2, 8000884 <turn_on_led_traffic2_in_state+0x14>)
 8000880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000884:	08000895 	.word	0x08000895
 8000888:	080008b3 	.word	0x080008b3
 800088c:	080008d3 	.word	0x080008d3
 8000890:	080008f3 	.word	0x080008f3
	case OFF:
		HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2108      	movs	r1, #8
 8000898:	4820      	ldr	r0, [pc, #128]	; (800091c <turn_on_led_traffic2_in_state+0xac>)
 800089a:	f001 f87e 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	2110      	movs	r1, #16
 80008a2:	481e      	ldr	r0, [pc, #120]	; (800091c <turn_on_led_traffic2_in_state+0xac>)
 80008a4:	f001 f879 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2120      	movs	r1, #32
 80008ac:	481b      	ldr	r0, [pc, #108]	; (800091c <turn_on_led_traffic2_in_state+0xac>)
 80008ae:	f001 f874 	bl	800199a <HAL_GPIO_WritePin>
	case RED:
		HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2108      	movs	r1, #8
 80008b6:	4819      	ldr	r0, [pc, #100]	; (800091c <turn_on_led_traffic2_in_state+0xac>)
 80008b8:	f001 f86f 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2110      	movs	r1, #16
 80008c0:	4816      	ldr	r0, [pc, #88]	; (800091c <turn_on_led_traffic2_in_state+0xac>)
 80008c2:	f001 f86a 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	2120      	movs	r1, #32
 80008ca:	4814      	ldr	r0, [pc, #80]	; (800091c <turn_on_led_traffic2_in_state+0xac>)
 80008cc:	f001 f865 	bl	800199a <HAL_GPIO_WritePin>
		break;
 80008d0:	e020      	b.n	8000914 <turn_on_led_traffic2_in_state+0xa4>
	case YELLOW:
		HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2108      	movs	r1, #8
 80008d6:	4811      	ldr	r0, [pc, #68]	; (800091c <turn_on_led_traffic2_in_state+0xac>)
 80008d8:	f001 f85f 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2110      	movs	r1, #16
 80008e0:	480e      	ldr	r0, [pc, #56]	; (800091c <turn_on_led_traffic2_in_state+0xac>)
 80008e2:	f001 f85a 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2120      	movs	r1, #32
 80008ea:	480c      	ldr	r0, [pc, #48]	; (800091c <turn_on_led_traffic2_in_state+0xac>)
 80008ec:	f001 f855 	bl	800199a <HAL_GPIO_WritePin>
		break;
 80008f0:	e010      	b.n	8000914 <turn_on_led_traffic2_in_state+0xa4>
	case GREEN:
		HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	2108      	movs	r1, #8
 80008f6:	4809      	ldr	r0, [pc, #36]	; (800091c <turn_on_led_traffic2_in_state+0xac>)
 80008f8:	f001 f84f 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2110      	movs	r1, #16
 8000900:	4806      	ldr	r0, [pc, #24]	; (800091c <turn_on_led_traffic2_in_state+0xac>)
 8000902:	f001 f84a 	bl	800199a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2120      	movs	r1, #32
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <turn_on_led_traffic2_in_state+0xac>)
 800090c:	f001 f845 	bl	800199a <HAL_GPIO_WritePin>
		break;
 8000910:	e000      	b.n	8000914 <turn_on_led_traffic2_in_state+0xa4>
	default:
		break;
 8000912:	bf00      	nop
	}
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000001c 	.word	0x2000001c
 800091c:	40010800 	.word	0x40010800

08000920 <toggle_led_traffic>:



void toggle_led_traffic(){
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	switch(state_led_traffic_1){
 8000924:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <toggle_led_traffic+0xd0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b0e      	cmp	r3, #14
 800092a:	d040      	beq.n	80009ae <toggle_led_traffic+0x8e>
 800092c:	2b0e      	cmp	r3, #14
 800092e:	dc5b      	bgt.n	80009e8 <toggle_led_traffic+0xc8>
 8000930:	2b0c      	cmp	r3, #12
 8000932:	d002      	beq.n	800093a <toggle_led_traffic+0x1a>
 8000934:	2b0d      	cmp	r3, #13
 8000936:	d01d      	beq.n	8000974 <toggle_led_traffic+0x54>
			HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin,SET);
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin,SET);
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_2_Pin);
			break;
		default:
			break;
 8000938:	e056      	b.n	80009e8 <toggle_led_traffic+0xc8>
			HAL_GPIO_TogglePin(GPIOA, LED_RED_1_Pin);
 800093a:	2101      	movs	r1, #1
 800093c:	482d      	ldr	r0, [pc, #180]	; (80009f4 <toggle_led_traffic+0xd4>)
 800093e:	f001 f844 	bl	80019ca <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin,SET);
 8000942:	2201      	movs	r2, #1
 8000944:	2102      	movs	r1, #2
 8000946:	482b      	ldr	r0, [pc, #172]	; (80009f4 <toggle_led_traffic+0xd4>)
 8000948:	f001 f827 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin,SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2104      	movs	r1, #4
 8000950:	4828      	ldr	r0, [pc, #160]	; (80009f4 <toggle_led_traffic+0xd4>)
 8000952:	f001 f822 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, LED_RED_2_Pin);
 8000956:	2108      	movs	r1, #8
 8000958:	4826      	ldr	r0, [pc, #152]	; (80009f4 <toggle_led_traffic+0xd4>)
 800095a:	f001 f836 	bl	80019ca <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin,SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2110      	movs	r1, #16
 8000962:	4824      	ldr	r0, [pc, #144]	; (80009f4 <toggle_led_traffic+0xd4>)
 8000964:	f001 f819 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin,SET);
 8000968:	2201      	movs	r2, #1
 800096a:	2120      	movs	r1, #32
 800096c:	4821      	ldr	r0, [pc, #132]	; (80009f4 <toggle_led_traffic+0xd4>)
 800096e:	f001 f814 	bl	800199a <HAL_GPIO_WritePin>
			break;
 8000972:	e03a      	b.n	80009ea <toggle_led_traffic+0xca>
			HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin,SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2101      	movs	r1, #1
 8000978:	481e      	ldr	r0, [pc, #120]	; (80009f4 <toggle_led_traffic+0xd4>)
 800097a:	f001 f80e 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_1_Pin);
 800097e:	2102      	movs	r1, #2
 8000980:	481c      	ldr	r0, [pc, #112]	; (80009f4 <toggle_led_traffic+0xd4>)
 8000982:	f001 f822 	bl	80019ca <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin,SET);
 8000986:	2201      	movs	r2, #1
 8000988:	2104      	movs	r1, #4
 800098a:	481a      	ldr	r0, [pc, #104]	; (80009f4 <toggle_led_traffic+0xd4>)
 800098c:	f001 f805 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin,SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2108      	movs	r1, #8
 8000994:	4817      	ldr	r0, [pc, #92]	; (80009f4 <toggle_led_traffic+0xd4>)
 8000996:	f001 f800 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_2_Pin);
 800099a:	2110      	movs	r1, #16
 800099c:	4815      	ldr	r0, [pc, #84]	; (80009f4 <toggle_led_traffic+0xd4>)
 800099e:	f001 f814 	bl	80019ca <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin,SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	2120      	movs	r1, #32
 80009a6:	4813      	ldr	r0, [pc, #76]	; (80009f4 <toggle_led_traffic+0xd4>)
 80009a8:	f000 fff7 	bl	800199a <HAL_GPIO_WritePin>
			break;
 80009ac:	e01d      	b.n	80009ea <toggle_led_traffic+0xca>
			HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin,SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2101      	movs	r1, #1
 80009b2:	4810      	ldr	r0, [pc, #64]	; (80009f4 <toggle_led_traffic+0xd4>)
 80009b4:	f000 fff1 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin,SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2102      	movs	r1, #2
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <toggle_led_traffic+0xd4>)
 80009be:	f000 ffec 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_1_Pin);
 80009c2:	2104      	movs	r1, #4
 80009c4:	480b      	ldr	r0, [pc, #44]	; (80009f4 <toggle_led_traffic+0xd4>)
 80009c6:	f001 f800 	bl	80019ca <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin,SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2108      	movs	r1, #8
 80009ce:	4809      	ldr	r0, [pc, #36]	; (80009f4 <toggle_led_traffic+0xd4>)
 80009d0:	f000 ffe3 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin,SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2110      	movs	r1, #16
 80009d8:	4806      	ldr	r0, [pc, #24]	; (80009f4 <toggle_led_traffic+0xd4>)
 80009da:	f000 ffde 	bl	800199a <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_2_Pin);
 80009de:	2120      	movs	r1, #32
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <toggle_led_traffic+0xd4>)
 80009e2:	f000 fff2 	bl	80019ca <HAL_GPIO_TogglePin>
			break;
 80009e6:	e000      	b.n	80009ea <toggle_led_traffic+0xca>
			break;
 80009e8:	bf00      	nop
		}
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000018 	.word	0x20000018
 80009f4:	40010800 	.word	0x40010800

080009f8 <display_led_traffic1>:


void display_led_traffic1(){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	switch(state_led_traffic_1){
 80009fc:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <display_led_traffic1+0x8c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b0e      	cmp	r3, #14
 8000a02:	d026      	beq.n	8000a52 <display_led_traffic1+0x5a>
 8000a04:	2b0e      	cmp	r3, #14
 8000a06:	dc34      	bgt.n	8000a72 <display_led_traffic1+0x7a>
 8000a08:	2b0c      	cmp	r3, #12
 8000a0a:	d002      	beq.n	8000a12 <display_led_traffic1+0x1a>
 8000a0c:	2b0d      	cmp	r3, #13
 8000a0e:	d010      	beq.n	8000a32 <display_led_traffic1+0x3a>
			turn_on_led_traffic1_in_state();
			set_timer2(duration_time_of_YELLOW);
		}
		break;
	default:
		break;
 8000a10:	e02f      	b.n	8000a72 <display_led_traffic1+0x7a>
		if(is_timer2_timeout()){
 8000a12:	f000 faa5 	bl	8000f60 <is_timer2_timeout>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d02c      	beq.n	8000a76 <display_led_traffic1+0x7e>
			state_led_traffic_1 = GREEN;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <display_led_traffic1+0x8c>)
 8000a1e:	220e      	movs	r2, #14
 8000a20:	601a      	str	r2, [r3, #0]
			turn_on_led_traffic1_in_state();
 8000a22:	f7ff fecd 	bl	80007c0 <turn_on_led_traffic1_in_state>
			set_timer2(duration_time_of_GREEN);
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <display_led_traffic1+0x90>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fa82 	bl	8000f34 <set_timer2>
		break;
 8000a30:	e021      	b.n	8000a76 <display_led_traffic1+0x7e>
		if(is_timer2_timeout()){
 8000a32:	f000 fa95 	bl	8000f60 <is_timer2_timeout>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d01e      	beq.n	8000a7a <display_led_traffic1+0x82>
			state_led_traffic_1 = RED;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <display_led_traffic1+0x8c>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	601a      	str	r2, [r3, #0]
			turn_on_led_traffic1_in_state();
 8000a42:	f7ff febd 	bl	80007c0 <turn_on_led_traffic1_in_state>
			set_timer2(duration_time_of_RED);
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <display_led_traffic1+0x94>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fa72 	bl	8000f34 <set_timer2>
		break;
 8000a50:	e013      	b.n	8000a7a <display_led_traffic1+0x82>
		if(is_timer2_timeout()){
 8000a52:	f000 fa85 	bl	8000f60 <is_timer2_timeout>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d010      	beq.n	8000a7e <display_led_traffic1+0x86>
			state_led_traffic_1 = YELLOW;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <display_led_traffic1+0x8c>)
 8000a5e:	220d      	movs	r2, #13
 8000a60:	601a      	str	r2, [r3, #0]
			turn_on_led_traffic1_in_state();
 8000a62:	f7ff fead 	bl	80007c0 <turn_on_led_traffic1_in_state>
			set_timer2(duration_time_of_YELLOW);
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <display_led_traffic1+0x98>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fa62 	bl	8000f34 <set_timer2>
		break;
 8000a70:	e005      	b.n	8000a7e <display_led_traffic1+0x86>
		break;
 8000a72:	bf00      	nop
 8000a74:	e004      	b.n	8000a80 <display_led_traffic1+0x88>
		break;
 8000a76:	bf00      	nop
 8000a78:	e002      	b.n	8000a80 <display_led_traffic1+0x88>
		break;
 8000a7a:	bf00      	nop
 8000a7c:	e000      	b.n	8000a80 <display_led_traffic1+0x88>
		break;
 8000a7e:	bf00      	nop
	}
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000018 	.word	0x20000018
 8000a88:	20000014 	.word	0x20000014
 8000a8c:	2000000c 	.word	0x2000000c
 8000a90:	20000010 	.word	0x20000010

08000a94 <display_led_traffic2>:
void display_led_traffic2(){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	switch(state_led_traffic_2){
 8000a98:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <display_led_traffic2+0x8c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b0e      	cmp	r3, #14
 8000a9e:	d026      	beq.n	8000aee <display_led_traffic2+0x5a>
 8000aa0:	2b0e      	cmp	r3, #14
 8000aa2:	dc34      	bgt.n	8000b0e <display_led_traffic2+0x7a>
 8000aa4:	2b0c      	cmp	r3, #12
 8000aa6:	d002      	beq.n	8000aae <display_led_traffic2+0x1a>
 8000aa8:	2b0d      	cmp	r3, #13
 8000aaa:	d010      	beq.n	8000ace <display_led_traffic2+0x3a>
				turn_on_led_traffic2_in_state();
				set_timer3(duration_time_of_YELLOW);
			}
			break;
		default:
			break;
 8000aac:	e02f      	b.n	8000b0e <display_led_traffic2+0x7a>
			if(is_timer3_timeout()){
 8000aae:	f000 fa7f 	bl	8000fb0 <is_timer3_timeout>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d02c      	beq.n	8000b12 <display_led_traffic2+0x7e>
				state_led_traffic_2 = GREEN;
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <display_led_traffic2+0x8c>)
 8000aba:	220e      	movs	r2, #14
 8000abc:	601a      	str	r2, [r3, #0]
				turn_on_led_traffic2_in_state();
 8000abe:	f7ff fed7 	bl	8000870 <turn_on_led_traffic2_in_state>
				set_timer3(duration_time_of_GREEN);
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <display_led_traffic2+0x90>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 fa5c 	bl	8000f84 <set_timer3>
			break;
 8000acc:	e021      	b.n	8000b12 <display_led_traffic2+0x7e>
			if(is_timer3_timeout()){
 8000ace:	f000 fa6f 	bl	8000fb0 <is_timer3_timeout>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d01e      	beq.n	8000b16 <display_led_traffic2+0x82>
				state_led_traffic_2 = RED;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <display_led_traffic2+0x8c>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
				turn_on_led_traffic2_in_state();
 8000ade:	f7ff fec7 	bl	8000870 <turn_on_led_traffic2_in_state>
				set_timer3(duration_time_of_RED);
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <display_led_traffic2+0x94>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fa4c 	bl	8000f84 <set_timer3>
			break;
 8000aec:	e013      	b.n	8000b16 <display_led_traffic2+0x82>
			if(is_timer3_timeout()){
 8000aee:	f000 fa5f 	bl	8000fb0 <is_timer3_timeout>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d010      	beq.n	8000b1a <display_led_traffic2+0x86>
				state_led_traffic_2 = YELLOW;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <display_led_traffic2+0x8c>)
 8000afa:	220d      	movs	r2, #13
 8000afc:	601a      	str	r2, [r3, #0]
				turn_on_led_traffic2_in_state();
 8000afe:	f7ff feb7 	bl	8000870 <turn_on_led_traffic2_in_state>
				set_timer3(duration_time_of_YELLOW);
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <display_led_traffic2+0x98>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fa3c 	bl	8000f84 <set_timer3>
			break;
 8000b0c:	e005      	b.n	8000b1a <display_led_traffic2+0x86>
			break;
 8000b0e:	bf00      	nop
 8000b10:	e004      	b.n	8000b1c <display_led_traffic2+0x88>
			break;
 8000b12:	bf00      	nop
 8000b14:	e002      	b.n	8000b1c <display_led_traffic2+0x88>
			break;
 8000b16:	bf00      	nop
 8000b18:	e000      	b.n	8000b1c <display_led_traffic2+0x88>
			break;
 8000b1a:	bf00      	nop
		}
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000001c 	.word	0x2000001c
 8000b24:	20000014 	.word	0x20000014
 8000b28:	2000000c 	.word	0x2000000c
 8000b2c:	20000010 	.word	0x20000010

08000b30 <blinking_led_traffic>:


void blinking_led_traffic(){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	if(is_timer4_timeout()){
 8000b34:	f000 fa64 	bl	8001000 <is_timer4_timeout>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d005      	beq.n	8000b4a <blinking_led_traffic+0x1a>
		toggle_led_traffic();
 8000b3e:	f7ff feef 	bl	8000920 <toggle_led_traffic>
		set_timer4(500);
 8000b42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b46:	f000 fa45 	bl	8000fd4 <set_timer4>

	}
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b54:	f000 fc20 	bl	8001398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b58:	f000 f814 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5c:	f000 f89a 	bl	8000c94 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b60:	f000 f84c 	bl	8000bfc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <main+0x2c>)
 8000b66:	f001 fb81 	bl	800226c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	mode = INIT_SYSTEM;
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <main+0x30>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]

  while (1)
  {

	  fsm_run();
 8000b70:	f000 fac2 	bl	80010f8 <fsm_run>
	  led_7seg_run();
 8000b74:	f7ff fdfa 	bl	800076c <led_7seg_run>
	  fsm_run();
 8000b78:	e7fa      	b.n	8000b70 <main+0x20>
 8000b7a:	bf00      	nop
 8000b7c:	20000090 	.word	0x20000090
 8000b80:	20000074 	.word	0x20000074

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b090      	sub	sp, #64	; 0x40
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 0318 	add.w	r3, r7, #24
 8000b8e:	2228      	movs	r2, #40	; 0x28
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 ff22 	bl	80029dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000baa:	2301      	movs	r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bae:	2310      	movs	r3, #16
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb6:	f107 0318 	add.w	r3, r7, #24
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 ff1e 	bl	80019fc <HAL_RCC_OscConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bc6:	f000 f8d1 	bl	8000d6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bca:	230f      	movs	r3, #15
 8000bcc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 f98a 	bl	8001efc <HAL_RCC_ClockConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bee:	f000 f8bd 	bl	8000d6c <Error_Handler>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	3740      	adds	r7, #64	; 0x40
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c10:	463b      	mov	r3, r7
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c18:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_TIM2_Init+0x94>)
 8000c1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_TIM2_Init+0x94>)
 8000c22:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <MX_TIM2_Init+0x94>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_TIM2_Init+0x94>)
 8000c30:	220a      	movs	r2, #10
 8000c32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <MX_TIM2_Init+0x94>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <MX_TIM2_Init+0x94>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c40:	4813      	ldr	r0, [pc, #76]	; (8000c90 <MX_TIM2_Init+0x94>)
 8000c42:	f001 fac3 	bl	80021cc <HAL_TIM_Base_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c4c:	f000 f88e 	bl	8000d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480c      	ldr	r0, [pc, #48]	; (8000c90 <MX_TIM2_Init+0x94>)
 8000c5e:	f001 fc59 	bl	8002514 <HAL_TIM_ConfigClockSource>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c68:	f000 f880 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_TIM2_Init+0x94>)
 8000c7a:	f001 fe21 	bl	80028c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c84:	f000 f872 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000090 	.word	0x20000090

08000c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <MX_GPIO_Init+0xb4>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a26      	ldr	r2, [pc, #152]	; (8000d48 <MX_GPIO_Init+0xb4>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <MX_GPIO_Init+0xb4>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc0:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <MX_GPIO_Init+0xb4>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a20      	ldr	r2, [pc, #128]	; (8000d48 <MX_GPIO_Init+0xb4>)
 8000cc6:	f043 0308 	orr.w	r3, r3, #8
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <MX_GPIO_Init+0xb4>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000cde:	481b      	ldr	r0, [pc, #108]	; (8000d4c <MX_GPIO_Init+0xb8>)
 8000ce0:	f000 fe5b 	bl	800199a <HAL_GPIO_WritePin>
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|LED_7SEG_A_Pin|LED_7SEG_B_Pin
                          |LED_7SEG_C_Pin|LED_7SEG_D_Pin|LED_7SEG_E_Pin|LED_7SEG_F_Pin
                          |LED_7SEG_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2178      	movs	r1, #120	; 0x78
 8000ce8:	4819      	ldr	r0, [pc, #100]	; (8000d50 <MX_GPIO_Init+0xbc>)
 8000cea:	f000 fe56 	bl	800199a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin LED_7SEG_A_Pin LED_7SEG_B_Pin
                           LED_7SEG_C_Pin LED_7SEG_D_Pin LED_7SEG_E_Pin LED_7SEG_F_Pin
                           LED_7SEG_G_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8000cee:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000cf2:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|LED_7SEG_A_Pin|LED_7SEG_B_Pin
                          |LED_7SEG_C_Pin|LED_7SEG_D_Pin|LED_7SEG_E_Pin|LED_7SEG_F_Pin
                          |LED_7SEG_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	4619      	mov	r1, r3
 8000d06:	4811      	ldr	r0, [pc, #68]	; (8000d4c <MX_GPIO_Init+0xb8>)
 8000d08:	f000 fcb6 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON0_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480c      	ldr	r0, [pc, #48]	; (8000d50 <MX_GPIO_Init+0xbc>)
 8000d20:	f000 fcaa 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8000d24:	2378      	movs	r3, #120	; 0x78
 8000d26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2302      	movs	r3, #2
 8000d32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_GPIO_Init+0xbc>)
 8000d3c:	f000 fc9c 	bl	8001678 <HAL_GPIO_Init>

}
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010800 	.word	0x40010800
 8000d50:	40010c00 	.word	0x40010c00

08000d54 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	timer_run();
 8000d5c:	f000 f962 	bl	8001024 <timer_run>
	getKeyInput0();
 8000d60:	f7ff fa12 	bl	8000188 <getKeyInput0>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <Error_Handler+0x8>
	...

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	61d3      	str	r3, [r2, #28]
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_MspInit+0x60>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_MspInit+0x60>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010000 	.word	0x40010000

08000ddc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dec:	d113      	bne.n	8000e16 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <HAL_TIM_Base_MspInit+0x44>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <HAL_TIM_Base_MspInit+0x44>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_TIM_Base_MspInit+0x44>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	201c      	movs	r0, #28
 8000e0c:	f000 fbfd 	bl	800160a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e10:	201c      	movs	r0, #28
 8000e12:	f000 fc16 	bl	8001642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <NMI_Handler+0x4>

08000e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <MemManage_Handler+0x4>

08000e36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr

08000e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6a:	f000 fadb 	bl	8001424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <TIM2_IRQHandler+0x10>)
 8000e7a:	f001 fa43 	bl	8002304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000090 	.word	0x20000090

08000e88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <set_timer0>:

//timer0

int timer0_counter = 1000;
int timer0_flag = 0;
void set_timer0(int duration){
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/TIME_CYCLE;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <set_timer0+0x24>)
 8000ea0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea4:	1092      	asrs	r2, r2, #2
 8000ea6:	17db      	asrs	r3, r3, #31
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <set_timer0+0x28>)
 8000eac:	6013      	str	r3, [r2, #0]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	66666667 	.word	0x66666667
 8000ebc:	20000038 	.word	0x20000038

08000ec0 <is_timer0_timeout>:
int is_timer0_timeout(){
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
	if(timer0_flag ){
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <is_timer0_timeout+0x20>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d004      	beq.n	8000ed6 <is_timer0_timeout+0x16>
		timer0_flag = 0;
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <is_timer0_timeout+0x20>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
		return 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <is_timer0_timeout+0x18>
	}
	return 0;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	2000007c 	.word	0x2000007c

08000ee4 <set_timer1>:

//timer1
int timer1_counter = 1000;
int timer1_flag = 0;
void set_timer1(int duration){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIME_CYCLE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <set_timer1+0x24>)
 8000ef0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef4:	1092      	asrs	r2, r2, #2
 8000ef6:	17db      	asrs	r3, r3, #31
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <set_timer1+0x28>)
 8000efc:	6013      	str	r3, [r2, #0]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	66666667 	.word	0x66666667
 8000f0c:	2000003c 	.word	0x2000003c

08000f10 <is_timer1_timeout>:
int is_timer1_timeout(){
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
	if(timer1_flag ){
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <is_timer1_timeout+0x20>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d004      	beq.n	8000f26 <is_timer1_timeout+0x16>
		timer1_flag = 0;
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <is_timer1_timeout+0x20>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
		return 1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <is_timer1_timeout+0x18>
	}
	return 0;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	20000080 	.word	0x20000080

08000f34 <set_timer2>:

//timer2

int timer2_counter = 1000;
int timer2_flag = 0;
void set_timer2(int duration){
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIME_CYCLE;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <set_timer2+0x24>)
 8000f40:	fb82 1203 	smull	r1, r2, r2, r3
 8000f44:	1092      	asrs	r2, r2, #2
 8000f46:	17db      	asrs	r3, r3, #31
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <set_timer2+0x28>)
 8000f4c:	6013      	str	r3, [r2, #0]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	66666667 	.word	0x66666667
 8000f5c:	20000040 	.word	0x20000040

08000f60 <is_timer2_timeout>:
int is_timer2_timeout(){
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
	if(timer2_flag ){
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <is_timer2_timeout+0x20>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d004      	beq.n	8000f76 <is_timer2_timeout+0x16>
		timer2_flag = 0;
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <is_timer2_timeout+0x20>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
		return 1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <is_timer2_timeout+0x18>
	}
	return 0;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20000084 	.word	0x20000084

08000f84 <set_timer3>:

//timer3

int timer3_counter = 1000;
int timer3_flag = 0;
void set_timer3(int duration){
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIME_CYCLE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <set_timer3+0x24>)
 8000f90:	fb82 1203 	smull	r1, r2, r2, r3
 8000f94:	1092      	asrs	r2, r2, #2
 8000f96:	17db      	asrs	r3, r3, #31
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <set_timer3+0x28>)
 8000f9c:	6013      	str	r3, [r2, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	66666667 	.word	0x66666667
 8000fac:	20000044 	.word	0x20000044

08000fb0 <is_timer3_timeout>:
int is_timer3_timeout(){
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
	if(timer3_flag ){
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <is_timer3_timeout+0x20>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d004      	beq.n	8000fc6 <is_timer3_timeout+0x16>
		timer3_flag = 0;
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <is_timer3_timeout+0x20>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
		return 1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <is_timer3_timeout+0x18>
	}
	return 0;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	20000088 	.word	0x20000088

08000fd4 <set_timer4>:

//timer4

int timer4_counter = 1000;
int timer4_flag = 0;
void set_timer4(int duration){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIME_CYCLE;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <set_timer4+0x24>)
 8000fe0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe4:	1092      	asrs	r2, r2, #2
 8000fe6:	17db      	asrs	r3, r3, #31
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <set_timer4+0x28>)
 8000fec:	6013      	str	r3, [r2, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	66666667 	.word	0x66666667
 8000ffc:	20000048 	.word	0x20000048

08001000 <is_timer4_timeout>:
int is_timer4_timeout(){
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
	if(timer4_flag ){
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <is_timer4_timeout+0x20>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d004      	beq.n	8001016 <is_timer4_timeout+0x16>
		timer4_flag = 0;
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <is_timer4_timeout+0x20>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
		return 1;
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <is_timer4_timeout+0x18>
	}
	return 0;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	2000008c 	.word	0x2000008c

08001024 <timer_run>:




void timer_run(){
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

	if(timer0_counter >0){
 8001028:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <timer_run+0xac>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	dd0b      	ble.n	8001048 <timer_run+0x24>
		timer0_counter--;
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <timer_run+0xac>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3b01      	subs	r3, #1
 8001036:	4a26      	ldr	r2, [pc, #152]	; (80010d0 <timer_run+0xac>)
 8001038:	6013      	str	r3, [r2, #0]
		if(timer0_counter <=0) timer0_flag = 1;
 800103a:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <timer_run+0xac>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	dc02      	bgt.n	8001048 <timer_run+0x24>
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <timer_run+0xb0>)
 8001044:	2201      	movs	r2, #1
 8001046:	601a      	str	r2, [r3, #0]
	}

	if(timer1_counter >0){
 8001048:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <timer_run+0xb4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	dd0b      	ble.n	8001068 <timer_run+0x44>
		timer1_counter--;
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <timer_run+0xb4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3b01      	subs	r3, #1
 8001056:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <timer_run+0xb4>)
 8001058:	6013      	str	r3, [r2, #0]
		if(timer1_counter <=0) timer1_flag = 1;
 800105a:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <timer_run+0xb4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	dc02      	bgt.n	8001068 <timer_run+0x44>
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <timer_run+0xb8>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter >0){
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <timer_run+0xbc>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	dd0b      	ble.n	8001088 <timer_run+0x64>
		timer2_counter--;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <timer_run+0xbc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3b01      	subs	r3, #1
 8001076:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <timer_run+0xbc>)
 8001078:	6013      	str	r3, [r2, #0]
		if(timer2_counter <=0) timer2_flag = 1;
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <timer_run+0xbc>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	dc02      	bgt.n	8001088 <timer_run+0x64>
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <timer_run+0xc0>)
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter >0){
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <timer_run+0xc4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	dd0b      	ble.n	80010a8 <timer_run+0x84>
		timer3_counter--;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <timer_run+0xc4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3b01      	subs	r3, #1
 8001096:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <timer_run+0xc4>)
 8001098:	6013      	str	r3, [r2, #0]
		if(timer3_counter <=0) timer3_flag = 1;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <timer_run+0xc4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	dc02      	bgt.n	80010a8 <timer_run+0x84>
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <timer_run+0xc8>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter >0){
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <timer_run+0xcc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	dd0b      	ble.n	80010c8 <timer_run+0xa4>
		timer4_counter--;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <timer_run+0xcc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <timer_run+0xcc>)
 80010b8:	6013      	str	r3, [r2, #0]
		if(timer4_counter <=0) timer4_flag = 1;
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <timer_run+0xcc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	dc02      	bgt.n	80010c8 <timer_run+0xa4>
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <timer_run+0xd0>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	601a      	str	r2, [r3, #0]
	}
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	20000038 	.word	0x20000038
 80010d4:	2000007c 	.word	0x2000007c
 80010d8:	2000003c 	.word	0x2000003c
 80010dc:	20000080 	.word	0x20000080
 80010e0:	20000040 	.word	0x20000040
 80010e4:	20000084 	.word	0x20000084
 80010e8:	20000044 	.word	0x20000044
 80010ec:	20000088 	.word	0x20000088
 80010f0:	20000048 	.word	0x20000048
 80010f4:	2000008c 	.word	0x2000008c

080010f8 <fsm_run>:
 */

#include "traffic_fsm.h"


void fsm_run(){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	switch(mode){
 80010fc:	4b88      	ldr	r3, [pc, #544]	; (8001320 <fsm_run+0x228>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b04      	cmp	r3, #4
 8001102:	f200 8101 	bhi.w	8001308 <fsm_run+0x210>
 8001106:	a201      	add	r2, pc, #4	; (adr r2, 800110c <fsm_run+0x14>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	08001121 	.word	0x08001121
 8001110:	0800119b 	.word	0x0800119b
 8001114:	08001211 	.word	0x08001211
 8001118:	0800125b 	.word	0x0800125b
 800111c:	080012a5 	.word	0x080012a5
	case INIT_SYSTEM:
		state_button0 = UNACTIVE ;
 8001120:	4b80      	ldr	r3, [pc, #512]	; (8001324 <fsm_run+0x22c>)
 8001122:	2210      	movs	r2, #16
 8001124:	601a      	str	r2, [r3, #0]
		duration_time_of_RED = 5000;
 8001126:	4b80      	ldr	r3, [pc, #512]	; (8001328 <fsm_run+0x230>)
 8001128:	f241 3288 	movw	r2, #5000	; 0x1388
 800112c:	601a      	str	r2, [r3, #0]
		duration_time_of_YELLOW = 2000;
 800112e:	4b7f      	ldr	r3, [pc, #508]	; (800132c <fsm_run+0x234>)
 8001130:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001134:	601a      	str	r2, [r3, #0]
		duration_time_of_GREEN = 3000;
 8001136:	4b7e      	ldr	r3, [pc, #504]	; (8001330 <fsm_run+0x238>)
 8001138:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800113c:	601a      	str	r2, [r3, #0]
		set_timer1(100);
 800113e:	2064      	movs	r0, #100	; 0x64
 8001140:	f7ff fed0 	bl	8000ee4 <set_timer1>
		state_led_traffic_1 = RED;
 8001144:	4b7b      	ldr	r3, [pc, #492]	; (8001334 <fsm_run+0x23c>)
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
		turn_on_led_traffic1_in_state();
 800114a:	f7ff fb39 	bl	80007c0 <turn_on_led_traffic1_in_state>
		state_led_traffic_2 = GREEN;
 800114e:	4b7a      	ldr	r3, [pc, #488]	; (8001338 <fsm_run+0x240>)
 8001150:	220e      	movs	r2, #14
 8001152:	601a      	str	r2, [r3, #0]
		turn_on_led_traffic2_in_state();
 8001154:	f7ff fb8c 	bl	8000870 <turn_on_led_traffic2_in_state>
		//update_buffer_led_7seg(duration_time_of_RED/1000, duration_time_of_GREEN/1000);
		set_timer2(duration_time_of_RED);
 8001158:	4b73      	ldr	r3, [pc, #460]	; (8001328 <fsm_run+0x230>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fee9 	bl	8000f34 <set_timer2>
		set_timer3(duration_time_of_GREEN);
 8001162:	4b73      	ldr	r3, [pc, #460]	; (8001330 <fsm_run+0x238>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff0c 	bl	8000f84 <set_timer3>
		update_buffer_led_7seg(timer2_counter*TIME_CYCLE /1000,timer3_counter *TIME_CYCLE/1000);
 800116c:	4b73      	ldr	r3, [pc, #460]	; (800133c <fsm_run+0x244>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a73      	ldr	r2, [pc, #460]	; (8001340 <fsm_run+0x248>)
 8001172:	fb82 1203 	smull	r1, r2, r2, r3
 8001176:	1152      	asrs	r2, r2, #5
 8001178:	17db      	asrs	r3, r3, #31
 800117a:	1ad0      	subs	r0, r2, r3
 800117c:	4b71      	ldr	r3, [pc, #452]	; (8001344 <fsm_run+0x24c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a6f      	ldr	r2, [pc, #444]	; (8001340 <fsm_run+0x248>)
 8001182:	fb82 1203 	smull	r1, r2, r2, r3
 8001186:	1152      	asrs	r2, r2, #5
 8001188:	17db      	asrs	r3, r3, #31
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fa8b 	bl	80006a8 <update_buffer_led_7seg>
		mode = NORMAL_MODE;
 8001192:	4b63      	ldr	r3, [pc, #396]	; (8001320 <fsm_run+0x228>)
 8001194:	2201      	movs	r2, #1
 8001196:	601a      	str	r2, [r3, #0]
		break;
 8001198:	e0bf      	b.n	800131a <fsm_run+0x222>
	case NORMAL_MODE:
		//update_buffer_led_7seg((timer2_counter+1)*TIME_CYCLE /1000,(timer3_counter + 1)*TIME_CYCLE/1000);
		display_led_traffic1();
 800119a:	f7ff fc2d 	bl	80009f8 <display_led_traffic1>
		display_led_traffic2();
 800119e:	f7ff fc79 	bl	8000a94 <display_led_traffic2>
		update_buffer_led_7seg(timer2_counter*TIME_CYCLE /1000,timer3_counter *TIME_CYCLE/1000);
 80011a2:	4b66      	ldr	r3, [pc, #408]	; (800133c <fsm_run+0x244>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a66      	ldr	r2, [pc, #408]	; (8001340 <fsm_run+0x248>)
 80011a8:	fb82 1203 	smull	r1, r2, r2, r3
 80011ac:	1152      	asrs	r2, r2, #5
 80011ae:	17db      	asrs	r3, r3, #31
 80011b0:	1ad0      	subs	r0, r2, r3
 80011b2:	4b64      	ldr	r3, [pc, #400]	; (8001344 <fsm_run+0x24c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a62      	ldr	r2, [pc, #392]	; (8001340 <fsm_run+0x248>)
 80011b8:	fb82 1203 	smull	r1, r2, r2, r3
 80011bc:	1152      	asrs	r2, r2, #5
 80011be:	17db      	asrs	r3, r3, #31
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fa70 	bl	80006a8 <update_buffer_led_7seg>
		if(is_button0_pressed()){
 80011c8:	f7fe ffc0 	bl	800014c <is_button0_pressed>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 809c 	beq.w	800130c <fsm_run+0x214>
			state_led_traffic_1 = RED;
 80011d4:	4b57      	ldr	r3, [pc, #348]	; (8001334 <fsm_run+0x23c>)
 80011d6:	220c      	movs	r2, #12
 80011d8:	601a      	str	r2, [r3, #0]
			state_led_traffic_2 = RED;
 80011da:	4b57      	ldr	r3, [pc, #348]	; (8001338 <fsm_run+0x240>)
 80011dc:	220c      	movs	r2, #12
 80011de:	601a      	str	r2, [r3, #0]
			turn_on_led_traffic1_in_state();
 80011e0:	f7ff faee 	bl	80007c0 <turn_on_led_traffic1_in_state>
			turn_on_led_traffic2_in_state();
 80011e4:	f7ff fb44 	bl	8000870 <turn_on_led_traffic2_in_state>
			update_buffer_led_7seg(2, duration_time_of_RED/1000);
 80011e8:	4b4f      	ldr	r3, [pc, #316]	; (8001328 <fsm_run+0x230>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a56      	ldr	r2, [pc, #344]	; (8001348 <fsm_run+0x250>)
 80011ee:	fb82 1203 	smull	r1, r2, r2, r3
 80011f2:	1192      	asrs	r2, r2, #6
 80011f4:	17db      	asrs	r3, r3, #31
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	4619      	mov	r1, r3
 80011fa:	2002      	movs	r0, #2
 80011fc:	f7ff fa54 	bl	80006a8 <update_buffer_led_7seg>
			set_timer4(500);
 8001200:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001204:	f7ff fee6 	bl	8000fd4 <set_timer4>
			mode = MODIFY_RED_MODE;
 8001208:	4b45      	ldr	r3, [pc, #276]	; (8001320 <fsm_run+0x228>)
 800120a:	2202      	movs	r2, #2
 800120c:	601a      	str	r2, [r3, #0]
		}
		break;
 800120e:	e07d      	b.n	800130c <fsm_run+0x214>
	case MODIFY_RED_MODE:
		blinking_led_traffic();
 8001210:	f7ff fc8e 	bl	8000b30 <blinking_led_traffic>
		if(is_button0_pressed()){
 8001214:	f7fe ff9a 	bl	800014c <is_button0_pressed>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d078      	beq.n	8001310 <fsm_run+0x218>
			state_led_traffic_1 = YELLOW;
 800121e:	4b45      	ldr	r3, [pc, #276]	; (8001334 <fsm_run+0x23c>)
 8001220:	220d      	movs	r2, #13
 8001222:	601a      	str	r2, [r3, #0]
			state_led_traffic_2 = YELLOW;
 8001224:	4b44      	ldr	r3, [pc, #272]	; (8001338 <fsm_run+0x240>)
 8001226:	220d      	movs	r2, #13
 8001228:	601a      	str	r2, [r3, #0]
			turn_on_led_traffic1_in_state();
 800122a:	f7ff fac9 	bl	80007c0 <turn_on_led_traffic1_in_state>
			turn_on_led_traffic2_in_state();
 800122e:	f7ff fb1f 	bl	8000870 <turn_on_led_traffic2_in_state>
			update_buffer_led_7seg(3, duration_time_of_YELLOW/1000);
 8001232:	4b3e      	ldr	r3, [pc, #248]	; (800132c <fsm_run+0x234>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a44      	ldr	r2, [pc, #272]	; (8001348 <fsm_run+0x250>)
 8001238:	fb82 1203 	smull	r1, r2, r2, r3
 800123c:	1192      	asrs	r2, r2, #6
 800123e:	17db      	asrs	r3, r3, #31
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	4619      	mov	r1, r3
 8001244:	2003      	movs	r0, #3
 8001246:	f7ff fa2f 	bl	80006a8 <update_buffer_led_7seg>
			set_timer4(500);
 800124a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800124e:	f7ff fec1 	bl	8000fd4 <set_timer4>
			mode = MODIFY_YELLOW_MODE;
 8001252:	4b33      	ldr	r3, [pc, #204]	; (8001320 <fsm_run+0x228>)
 8001254:	2203      	movs	r2, #3
 8001256:	601a      	str	r2, [r3, #0]
		}

		break;
 8001258:	e05a      	b.n	8001310 <fsm_run+0x218>
	case MODIFY_YELLOW_MODE:
		blinking_led_traffic();
 800125a:	f7ff fc69 	bl	8000b30 <blinking_led_traffic>
		if(is_button0_pressed()){
 800125e:	f7fe ff75 	bl	800014c <is_button0_pressed>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d055      	beq.n	8001314 <fsm_run+0x21c>
			state_led_traffic_1 = GREEN;
 8001268:	4b32      	ldr	r3, [pc, #200]	; (8001334 <fsm_run+0x23c>)
 800126a:	220e      	movs	r2, #14
 800126c:	601a      	str	r2, [r3, #0]
			state_led_traffic_2 = GREEN;
 800126e:	4b32      	ldr	r3, [pc, #200]	; (8001338 <fsm_run+0x240>)
 8001270:	220e      	movs	r2, #14
 8001272:	601a      	str	r2, [r3, #0]
			turn_on_led_traffic1_in_state();
 8001274:	f7ff faa4 	bl	80007c0 <turn_on_led_traffic1_in_state>
			turn_on_led_traffic2_in_state();
 8001278:	f7ff fafa 	bl	8000870 <turn_on_led_traffic2_in_state>
			mode = MODIFY_GREEN_MODE;
 800127c:	4b28      	ldr	r3, [pc, #160]	; (8001320 <fsm_run+0x228>)
 800127e:	2204      	movs	r2, #4
 8001280:	601a      	str	r2, [r3, #0]
			update_buffer_led_7seg(4, duration_time_of_GREEN/1000);
 8001282:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <fsm_run+0x238>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a30      	ldr	r2, [pc, #192]	; (8001348 <fsm_run+0x250>)
 8001288:	fb82 1203 	smull	r1, r2, r2, r3
 800128c:	1192      	asrs	r2, r2, #6
 800128e:	17db      	asrs	r3, r3, #31
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	4619      	mov	r1, r3
 8001294:	2004      	movs	r0, #4
 8001296:	f7ff fa07 	bl	80006a8 <update_buffer_led_7seg>
			set_timer4(500);
 800129a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800129e:	f7ff fe99 	bl	8000fd4 <set_timer4>
		}
		break;
 80012a2:	e037      	b.n	8001314 <fsm_run+0x21c>
	case MODIFY_GREEN_MODE:
		blinking_led_traffic();
 80012a4:	f7ff fc44 	bl	8000b30 <blinking_led_traffic>
		if(is_button0_pressed()){
 80012a8:	f7fe ff50 	bl	800014c <is_button0_pressed>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d032      	beq.n	8001318 <fsm_run+0x220>
			state_led_traffic_1 = RED;
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <fsm_run+0x23c>)
 80012b4:	220c      	movs	r2, #12
 80012b6:	601a      	str	r2, [r3, #0]
			state_led_traffic_2 = GREEN;
 80012b8:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <fsm_run+0x240>)
 80012ba:	220e      	movs	r2, #14
 80012bc:	601a      	str	r2, [r3, #0]
			turn_on_led_traffic1_in_state();
 80012be:	f7ff fa7f 	bl	80007c0 <turn_on_led_traffic1_in_state>
			turn_on_led_traffic2_in_state();
 80012c2:	f7ff fad5 	bl	8000870 <turn_on_led_traffic2_in_state>
			set_timer2(duration_time_of_RED);
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <fsm_run+0x230>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fe32 	bl	8000f34 <set_timer2>
			set_timer3(duration_time_of_GREEN);
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <fsm_run+0x238>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fe55 	bl	8000f84 <set_timer3>
			update_buffer_led_7seg(timer2_counter*TIME_CYCLE /1000,timer3_counter *TIME_CYCLE/1000);
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <fsm_run+0x244>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a18      	ldr	r2, [pc, #96]	; (8001340 <fsm_run+0x248>)
 80012e0:	fb82 1203 	smull	r1, r2, r2, r3
 80012e4:	1152      	asrs	r2, r2, #5
 80012e6:	17db      	asrs	r3, r3, #31
 80012e8:	1ad0      	subs	r0, r2, r3
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <fsm_run+0x24c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a14      	ldr	r2, [pc, #80]	; (8001340 <fsm_run+0x248>)
 80012f0:	fb82 1203 	smull	r1, r2, r2, r3
 80012f4:	1152      	asrs	r2, r2, #5
 80012f6:	17db      	asrs	r3, r3, #31
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff f9d4 	bl	80006a8 <update_buffer_led_7seg>
			mode = NORMAL_MODE;
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <fsm_run+0x228>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]
		}
		break;
 8001306:	e007      	b.n	8001318 <fsm_run+0x220>
	default:
		break;
 8001308:	bf00      	nop
 800130a:	e006      	b.n	800131a <fsm_run+0x222>
		break;
 800130c:	bf00      	nop
 800130e:	e004      	b.n	800131a <fsm_run+0x222>
		break;
 8001310:	bf00      	nop
 8001312:	e002      	b.n	800131a <fsm_run+0x222>
		break;
 8001314:	bf00      	nop
 8001316:	e000      	b.n	800131a <fsm_run+0x222>
		break;
 8001318:	bf00      	nop
	}
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000074 	.word	0x20000074
 8001324:	20000020 	.word	0x20000020
 8001328:	2000000c 	.word	0x2000000c
 800132c:	20000010 	.word	0x20000010
 8001330:	20000014 	.word	0x20000014
 8001334:	20000018 	.word	0x20000018
 8001338:	2000001c 	.word	0x2000001c
 800133c:	20000040 	.word	0x20000040
 8001340:	51eb851f 	.word	0x51eb851f
 8001344:	20000044 	.word	0x20000044
 8001348:	10624dd3 	.word	0x10624dd3

0800134c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800134e:	490d      	ldr	r1, [pc, #52]	; (8001384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001364:	4c0a      	ldr	r4, [pc, #40]	; (8001390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001372:	f7ff fd89 	bl	8000e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001376:	f001 fb0d 	bl	8002994 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800137a:	f7ff fbe9 	bl	8000b50 <main>
  bx lr
 800137e:	4770      	bx	lr
  ldr r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001384:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001388:	08002a2c 	.word	0x08002a2c
  ldr r2, =_sbss
 800138c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001390:	200000dc 	.word	0x200000dc

08001394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC1_2_IRQHandler>
	...

08001398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_Init+0x28>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_Init+0x28>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f923 	bl	80015f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ae:	200f      	movs	r0, #15
 80013b0:	f000 f808 	bl	80013c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b4:	f7ff fce0 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40022000 	.word	0x40022000

080013c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_InitTick+0x54>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x58>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	fbb3 f3f1 	udiv	r3, r3, r1
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f93b 	bl	800165e <HAL_SYSTICK_Config>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00e      	b.n	8001410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	d80a      	bhi.n	800140e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f8:	2200      	movs	r2, #0
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f000 f903 	bl	800160a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001404:	4a06      	ldr	r2, [pc, #24]	; (8001420 <HAL_InitTick+0x5c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000034 	.word	0x20000034
 800141c:	20000050 	.word	0x20000050
 8001420:	2000004c 	.word	0x2000004c

08001424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_IncTick+0x1c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_IncTick+0x20>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a03      	ldr	r2, [pc, #12]	; (8001444 <HAL_IncTick+0x20>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	20000050 	.word	0x20000050
 8001444:	200000d8 	.word	0x200000d8

08001448 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b02      	ldr	r3, [pc, #8]	; (8001458 <HAL_GetTick+0x10>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	200000d8 	.word	0x200000d8

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db0b      	blt.n	80014ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	4906      	ldr	r1, [pc, #24]	; (80014f4 <__NVIC_EnableIRQ+0x34>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	2001      	movs	r0, #1
 80014e2:	fa00 f202 	lsl.w	r2, r0, r2
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100

080014f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db0a      	blt.n	8001522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	490c      	ldr	r1, [pc, #48]	; (8001544 <__NVIC_SetPriority+0x4c>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	0112      	lsls	r2, r2, #4
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	440b      	add	r3, r1
 800151c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001520:	e00a      	b.n	8001538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4908      	ldr	r1, [pc, #32]	; (8001548 <__NVIC_SetPriority+0x50>)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	3b04      	subs	r3, #4
 8001530:	0112      	lsls	r2, r2, #4
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	440b      	add	r3, r1
 8001536:	761a      	strb	r2, [r3, #24]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f1c3 0307 	rsb	r3, r3, #7
 8001566:	2b04      	cmp	r3, #4
 8001568:	bf28      	it	cs
 800156a:	2304      	movcs	r3, #4
 800156c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3304      	adds	r3, #4
 8001572:	2b06      	cmp	r3, #6
 8001574:	d902      	bls.n	800157c <NVIC_EncodePriority+0x30>
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3b03      	subs	r3, #3
 800157a:	e000      	b.n	800157e <NVIC_EncodePriority+0x32>
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	401a      	ands	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43d9      	mvns	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	4313      	orrs	r3, r2
         );
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3724      	adds	r7, #36	; 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c0:	d301      	bcc.n	80015c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00f      	b.n	80015e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <SysTick_Config+0x40>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ce:	210f      	movs	r1, #15
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f7ff ff90 	bl	80014f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <SysTick_Config+0x40>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <SysTick_Config+0x40>)
 80015e0:	2207      	movs	r2, #7
 80015e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	e000e010 	.word	0xe000e010

080015f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff2d 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800161c:	f7ff ff42 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 8001620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	6978      	ldr	r0, [r7, #20]
 8001628:	f7ff ff90 	bl	800154c <NVIC_EncodePriority>
 800162c:	4602      	mov	r2, r0
 800162e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff5f 	bl	80014f8 <__NVIC_SetPriority>
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff35 	bl	80014c0 <__NVIC_EnableIRQ>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ffa2 	bl	80015b0 <SysTick_Config>
 800166c:	4603      	mov	r3, r0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001678:	b480      	push	{r7}
 800167a:	b08b      	sub	sp, #44	; 0x2c
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168a:	e148      	b.n	800191e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800168c:	2201      	movs	r2, #1
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	f040 8137 	bne.w	8001918 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4aa3      	ldr	r2, [pc, #652]	; (800193c <HAL_GPIO_Init+0x2c4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d05e      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016b4:	4aa1      	ldr	r2, [pc, #644]	; (800193c <HAL_GPIO_Init+0x2c4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d875      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016ba:	4aa1      	ldr	r2, [pc, #644]	; (8001940 <HAL_GPIO_Init+0x2c8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d058      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016c0:	4a9f      	ldr	r2, [pc, #636]	; (8001940 <HAL_GPIO_Init+0x2c8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d86f      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016c6:	4a9f      	ldr	r2, [pc, #636]	; (8001944 <HAL_GPIO_Init+0x2cc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d052      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016cc:	4a9d      	ldr	r2, [pc, #628]	; (8001944 <HAL_GPIO_Init+0x2cc>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d869      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016d2:	4a9d      	ldr	r2, [pc, #628]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d04c      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016d8:	4a9b      	ldr	r2, [pc, #620]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d863      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016de:	4a9b      	ldr	r2, [pc, #620]	; (800194c <HAL_GPIO_Init+0x2d4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d046      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016e4:	4a99      	ldr	r2, [pc, #612]	; (800194c <HAL_GPIO_Init+0x2d4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d85d      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d82a      	bhi.n	8001744 <HAL_GPIO_Init+0xcc>
 80016ee:	2b12      	cmp	r3, #18
 80016f0:	d859      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016f2:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <HAL_GPIO_Init+0x80>)
 80016f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f8:	08001773 	.word	0x08001773
 80016fc:	0800174d 	.word	0x0800174d
 8001700:	0800175f 	.word	0x0800175f
 8001704:	080017a1 	.word	0x080017a1
 8001708:	080017a7 	.word	0x080017a7
 800170c:	080017a7 	.word	0x080017a7
 8001710:	080017a7 	.word	0x080017a7
 8001714:	080017a7 	.word	0x080017a7
 8001718:	080017a7 	.word	0x080017a7
 800171c:	080017a7 	.word	0x080017a7
 8001720:	080017a7 	.word	0x080017a7
 8001724:	080017a7 	.word	0x080017a7
 8001728:	080017a7 	.word	0x080017a7
 800172c:	080017a7 	.word	0x080017a7
 8001730:	080017a7 	.word	0x080017a7
 8001734:	080017a7 	.word	0x080017a7
 8001738:	080017a7 	.word	0x080017a7
 800173c:	08001755 	.word	0x08001755
 8001740:	08001769 	.word	0x08001769
 8001744:	4a82      	ldr	r2, [pc, #520]	; (8001950 <HAL_GPIO_Init+0x2d8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800174a:	e02c      	b.n	80017a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	623b      	str	r3, [r7, #32]
          break;
 8001752:	e029      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	3304      	adds	r3, #4
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e024      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	3308      	adds	r3, #8
 8001764:	623b      	str	r3, [r7, #32]
          break;
 8001766:	e01f      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	330c      	adds	r3, #12
 800176e:	623b      	str	r3, [r7, #32]
          break;
 8001770:	e01a      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800177a:	2304      	movs	r3, #4
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e013      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001788:	2308      	movs	r3, #8
 800178a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	611a      	str	r2, [r3, #16]
          break;
 8001792:	e009      	b.n	80017a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001794:	2308      	movs	r3, #8
 8001796:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	615a      	str	r2, [r3, #20]
          break;
 800179e:	e003      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e000      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          break;
 80017a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2bff      	cmp	r3, #255	; 0xff
 80017ac:	d801      	bhi.n	80017b2 <HAL_GPIO_Init+0x13a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	e001      	b.n	80017b6 <HAL_GPIO_Init+0x13e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3304      	adds	r3, #4
 80017b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2bff      	cmp	r3, #255	; 0xff
 80017bc:	d802      	bhi.n	80017c4 <HAL_GPIO_Init+0x14c>
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	e002      	b.n	80017ca <HAL_GPIO_Init+0x152>
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	3b08      	subs	r3, #8
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	210f      	movs	r1, #15
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	401a      	ands	r2, r3
 80017dc:	6a39      	ldr	r1, [r7, #32]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	431a      	orrs	r2, r3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 8090 	beq.w	8001918 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017f8:	4b56      	ldr	r3, [pc, #344]	; (8001954 <HAL_GPIO_Init+0x2dc>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a55      	ldr	r2, [pc, #340]	; (8001954 <HAL_GPIO_Init+0x2dc>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_GPIO_Init+0x2dc>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001810:	4a51      	ldr	r2, [pc, #324]	; (8001958 <HAL_GPIO_Init+0x2e0>)
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	220f      	movs	r2, #15
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a49      	ldr	r2, [pc, #292]	; (800195c <HAL_GPIO_Init+0x2e4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00d      	beq.n	8001858 <HAL_GPIO_Init+0x1e0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a48      	ldr	r2, [pc, #288]	; (8001960 <HAL_GPIO_Init+0x2e8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d007      	beq.n	8001854 <HAL_GPIO_Init+0x1dc>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a47      	ldr	r2, [pc, #284]	; (8001964 <HAL_GPIO_Init+0x2ec>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d101      	bne.n	8001850 <HAL_GPIO_Init+0x1d8>
 800184c:	2302      	movs	r3, #2
 800184e:	e004      	b.n	800185a <HAL_GPIO_Init+0x1e2>
 8001850:	2303      	movs	r3, #3
 8001852:	e002      	b.n	800185a <HAL_GPIO_Init+0x1e2>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <HAL_GPIO_Init+0x1e2>
 8001858:	2300      	movs	r3, #0
 800185a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185c:	f002 0203 	and.w	r2, r2, #3
 8001860:	0092      	lsls	r2, r2, #2
 8001862:	4093      	lsls	r3, r2
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800186a:	493b      	ldr	r1, [pc, #236]	; (8001958 <HAL_GPIO_Init+0x2e0>)
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	3302      	adds	r3, #2
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001884:	4b38      	ldr	r3, [pc, #224]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4937      	ldr	r1, [pc, #220]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001892:	4b35      	ldr	r3, [pc, #212]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	43db      	mvns	r3, r3
 800189a:	4933      	ldr	r1, [pc, #204]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 800189c:	4013      	ands	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ac:	4b2e      	ldr	r3, [pc, #184]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	492d      	ldr	r1, [pc, #180]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
 80018b8:	e006      	b.n	80018c8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	4929      	ldr	r1, [pc, #164]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	4923      	ldr	r1, [pc, #140]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	608b      	str	r3, [r1, #8]
 80018e0:	e006      	b.n	80018f0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	491f      	ldr	r1, [pc, #124]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	4919      	ldr	r1, [pc, #100]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	60cb      	str	r3, [r1, #12]
 8001908:	e006      	b.n	8001918 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	43db      	mvns	r3, r3
 8001912:	4915      	ldr	r1, [pc, #84]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 8001914:	4013      	ands	r3, r2
 8001916:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	3301      	adds	r3, #1
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	f47f aeaf 	bne.w	800168c <HAL_GPIO_Init+0x14>
  }
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	372c      	adds	r7, #44	; 0x2c
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	10320000 	.word	0x10320000
 8001940:	10310000 	.word	0x10310000
 8001944:	10220000 	.word	0x10220000
 8001948:	10210000 	.word	0x10210000
 800194c:	10120000 	.word	0x10120000
 8001950:	10110000 	.word	0x10110000
 8001954:	40021000 	.word	0x40021000
 8001958:	40010000 	.word	0x40010000
 800195c:	40010800 	.word	0x40010800
 8001960:	40010c00 	.word	0x40010c00
 8001964:	40011000 	.word	0x40011000
 8001968:	40010400 	.word	0x40010400

0800196c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	887b      	ldrh	r3, [r7, #2]
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
 8001988:	e001      	b.n	800198e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	807b      	strh	r3, [r7, #2]
 80019a6:	4613      	mov	r3, r2
 80019a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019aa:	787b      	ldrb	r3, [r7, #1]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b0:	887a      	ldrh	r2, [r7, #2]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019b6:	e003      	b.n	80019c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	041a      	lsls	r2, r3, #16
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	611a      	str	r2, [r3, #16]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	460b      	mov	r3, r1
 80019d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4013      	ands	r3, r2
 80019e2:	041a      	lsls	r2, r3, #16
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	887b      	ldrh	r3, [r7, #2]
 80019ea:	400b      	ands	r3, r1
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	611a      	str	r2, [r3, #16]
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e26c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8087 	beq.w	8001b2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a1c:	4b92      	ldr	r3, [pc, #584]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d00c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a28:	4b8f      	ldr	r3, [pc, #572]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d112      	bne.n	8001a5a <HAL_RCC_OscConfig+0x5e>
 8001a34:	4b8c      	ldr	r3, [pc, #560]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a40:	d10b      	bne.n	8001a5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a42:	4b89      	ldr	r3, [pc, #548]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d06c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x12c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d168      	bne.n	8001b28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e246      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x76>
 8001a64:	4b80      	ldr	r3, [pc, #512]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a7f      	ldr	r2, [pc, #508]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	e02e      	b.n	8001ad0 <HAL_RCC_OscConfig+0xd4>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x98>
 8001a7a:	4b7b      	ldr	r3, [pc, #492]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a7a      	ldr	r2, [pc, #488]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b78      	ldr	r3, [pc, #480]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a77      	ldr	r2, [pc, #476]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e01d      	b.n	8001ad0 <HAL_RCC_OscConfig+0xd4>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0xbc>
 8001a9e:	4b72      	ldr	r3, [pc, #456]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a71      	ldr	r2, [pc, #452]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b6f      	ldr	r3, [pc, #444]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a6e      	ldr	r2, [pc, #440]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0xd4>
 8001ab8:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a6a      	ldr	r2, [pc, #424]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a67      	ldr	r2, [pc, #412]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d013      	beq.n	8001b00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fcb6 	bl	8001448 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fcb2 	bl	8001448 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e1fa      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	4b5d      	ldr	r3, [pc, #372]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xe4>
 8001afe:	e014      	b.n	8001b2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff fca2 	bl	8001448 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff fc9e 	bl	8001448 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e1e6      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1a:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x10c>
 8001b26:	e000      	b.n	8001b2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d063      	beq.n	8001bfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b36:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00b      	beq.n	8001b5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b42:	4b49      	ldr	r3, [pc, #292]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d11c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x18c>
 8001b4e:	4b46      	ldr	r3, [pc, #280]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d116      	bne.n	8001b88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	4b43      	ldr	r3, [pc, #268]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_RCC_OscConfig+0x176>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e1ba      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b72:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4939      	ldr	r1, [pc, #228]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	e03a      	b.n	8001bfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d020      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b90:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <HAL_RCC_OscConfig+0x270>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7ff fc57 	bl	8001448 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fc53 	bl	8001448 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e19b      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4927      	ldr	r1, [pc, #156]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]
 8001bd0:	e015      	b.n	8001bfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd2:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <HAL_RCC_OscConfig+0x270>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fc36 	bl	8001448 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be0:	f7ff fc32 	bl	8001448 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e17a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d03a      	beq.n	8001c80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d019      	beq.n	8001c46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c12:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <HAL_RCC_OscConfig+0x274>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c18:	f7ff fc16 	bl	8001448 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c20:	f7ff fc12 	bl	8001448 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e15a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f000 faa6 	bl	8002190 <RCC_Delay>
 8001c44:	e01c      	b.n	8001c80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_RCC_OscConfig+0x274>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4c:	f7ff fbfc 	bl	8001448 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c52:	e00f      	b.n	8001c74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c54:	f7ff fbf8 	bl	8001448 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d908      	bls.n	8001c74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e140      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	42420000 	.word	0x42420000
 8001c70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c74:	4b9e      	ldr	r3, [pc, #632]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e9      	bne.n	8001c54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80a6 	beq.w	8001dda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c92:	4b97      	ldr	r3, [pc, #604]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10d      	bne.n	8001cba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	4b94      	ldr	r3, [pc, #592]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4a93      	ldr	r2, [pc, #588]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	61d3      	str	r3, [r2, #28]
 8001caa:	4b91      	ldr	r3, [pc, #580]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cba:	4b8e      	ldr	r3, [pc, #568]	; (8001ef4 <HAL_RCC_OscConfig+0x4f8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d118      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc6:	4b8b      	ldr	r3, [pc, #556]	; (8001ef4 <HAL_RCC_OscConfig+0x4f8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a8a      	ldr	r2, [pc, #552]	; (8001ef4 <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd2:	f7ff fbb9 	bl	8001448 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cda:	f7ff fbb5 	bl	8001448 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b64      	cmp	r3, #100	; 0x64
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e0fd      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cec:	4b81      	ldr	r3, [pc, #516]	; (8001ef4 <HAL_RCC_OscConfig+0x4f8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x312>
 8001d00:	4b7b      	ldr	r3, [pc, #492]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4a7a      	ldr	r2, [pc, #488]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	6213      	str	r3, [r2, #32]
 8001d0c:	e02d      	b.n	8001d6a <HAL_RCC_OscConfig+0x36e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x334>
 8001d16:	4b76      	ldr	r3, [pc, #472]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4a75      	ldr	r2, [pc, #468]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	6213      	str	r3, [r2, #32]
 8001d22:	4b73      	ldr	r3, [pc, #460]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4a72      	ldr	r2, [pc, #456]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	f023 0304 	bic.w	r3, r3, #4
 8001d2c:	6213      	str	r3, [r2, #32]
 8001d2e:	e01c      	b.n	8001d6a <HAL_RCC_OscConfig+0x36e>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b05      	cmp	r3, #5
 8001d36:	d10c      	bne.n	8001d52 <HAL_RCC_OscConfig+0x356>
 8001d38:	4b6d      	ldr	r3, [pc, #436]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4a6c      	ldr	r2, [pc, #432]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	6213      	str	r3, [r2, #32]
 8001d44:	4b6a      	ldr	r3, [pc, #424]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4a69      	ldr	r2, [pc, #420]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6213      	str	r3, [r2, #32]
 8001d50:	e00b      	b.n	8001d6a <HAL_RCC_OscConfig+0x36e>
 8001d52:	4b67      	ldr	r3, [pc, #412]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4a66      	ldr	r2, [pc, #408]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	6213      	str	r3, [r2, #32]
 8001d5e:	4b64      	ldr	r3, [pc, #400]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a63      	ldr	r2, [pc, #396]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	f023 0304 	bic.w	r3, r3, #4
 8001d68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d015      	beq.n	8001d9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d72:	f7ff fb69 	bl	8001448 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d78:	e00a      	b.n	8001d90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f7ff fb65 	bl	8001448 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e0ab      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d90:	4b57      	ldr	r3, [pc, #348]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0ee      	beq.n	8001d7a <HAL_RCC_OscConfig+0x37e>
 8001d9c:	e014      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff fb53 	bl	8001448 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da4:	e00a      	b.n	8001dbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da6:	f7ff fb4f 	bl	8001448 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e095      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dbc:	4b4c      	ldr	r3, [pc, #304]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1ee      	bne.n	8001da6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d105      	bne.n	8001dda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dce:	4b48      	ldr	r3, [pc, #288]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4a47      	ldr	r2, [pc, #284]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8081 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de4:	4b42      	ldr	r3, [pc, #264]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d061      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d146      	bne.n	8001e86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df8:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <HAL_RCC_OscConfig+0x4fc>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7ff fb23 	bl	8001448 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e06:	f7ff fb1f 	bl	8001448 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e067      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e18:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f0      	bne.n	8001e06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2c:	d108      	bne.n	8001e40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e2e:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	492d      	ldr	r1, [pc, #180]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e40:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a19      	ldr	r1, [r3, #32]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	430b      	orrs	r3, r1
 8001e52:	4927      	ldr	r1, [pc, #156]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <HAL_RCC_OscConfig+0x4fc>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5e:	f7ff faf3 	bl	8001448 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e66:	f7ff faef 	bl	8001448 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e037      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x46a>
 8001e84:	e02f      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e86:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <HAL_RCC_OscConfig+0x4fc>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fadc 	bl	8001448 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e94:	f7ff fad8 	bl	8001448 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e020      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea6:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x498>
 8001eb2:	e018      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e013      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	42420060 	.word	0x42420060

08001efc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0d0      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f10:	4b6a      	ldr	r3, [pc, #424]	; (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d910      	bls.n	8001f40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b67      	ldr	r3, [pc, #412]	; (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 0207 	bic.w	r2, r3, #7
 8001f26:	4965      	ldr	r1, [pc, #404]	; (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	4b63      	ldr	r3, [pc, #396]	; (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0b8      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d020      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f58:	4b59      	ldr	r3, [pc, #356]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	4a58      	ldr	r2, [pc, #352]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f70:	4b53      	ldr	r3, [pc, #332]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	4a52      	ldr	r2, [pc, #328]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f7c:	4b50      	ldr	r3, [pc, #320]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	494d      	ldr	r1, [pc, #308]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d040      	beq.n	800201c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d107      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa2:	4b47      	ldr	r3, [pc, #284]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d115      	bne.n	8001fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e07f      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d107      	bne.n	8001fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d109      	bne.n	8001fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e073      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fca:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e06b      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fda:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f023 0203 	bic.w	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4936      	ldr	r1, [pc, #216]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fec:	f7ff fa2c 	bl	8001448 <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	e00a      	b.n	800200a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff4:	f7ff fa28 	bl	8001448 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e053      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200a:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 020c 	and.w	r2, r3, #12
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	429a      	cmp	r2, r3
 800201a:	d1eb      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d210      	bcs.n	800204c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b24      	ldr	r3, [pc, #144]	; (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 0207 	bic.w	r2, r3, #7
 8002032:	4922      	ldr	r1, [pc, #136]	; (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e032      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4916      	ldr	r1, [pc, #88]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d009      	beq.n	800208a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	490e      	ldr	r1, [pc, #56]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800208a:	f000 f821 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 800208e:	4602      	mov	r2, r0
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	490a      	ldr	r1, [pc, #40]	; (80020c4 <HAL_RCC_ClockConfig+0x1c8>)
 800209c:	5ccb      	ldrb	r3, [r1, r3]
 800209e:	fa22 f303 	lsr.w	r3, r2, r3
 80020a2:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x1cc>)
 80020a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_RCC_ClockConfig+0x1d0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff f98a 	bl	80013c4 <HAL_InitTick>

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40022000 	.word	0x40022000
 80020c0:	40021000 	.word	0x40021000
 80020c4:	08002a14 	.word	0x08002a14
 80020c8:	20000034 	.word	0x20000034
 80020cc:	2000004c 	.word	0x2000004c

080020d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d0:	b490      	push	{r4, r7}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020d6:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020d8:	1d3c      	adds	r4, r7, #4
 80020da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020e0:	f240 2301 	movw	r3, #513	; 0x201
 80020e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b04      	cmp	r3, #4
 8002108:	d002      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0x40>
 800210a:	2b08      	cmp	r3, #8
 800210c:	d003      	beq.n	8002116 <HAL_RCC_GetSysClockFreq+0x46>
 800210e:	e02d      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002112:	623b      	str	r3, [r7, #32]
      break;
 8002114:	e02d      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	0c9b      	lsrs	r3, r3, #18
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002122:	4413      	add	r3, r2
 8002124:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002128:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d013      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	0c5b      	lsrs	r3, r3, #17
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002142:	4413      	add	r3, r2
 8002144:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002148:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	4a0e      	ldr	r2, [pc, #56]	; (8002188 <HAL_RCC_GetSysClockFreq+0xb8>)
 800214e:	fb02 f203 	mul.w	r2, r2, r3
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	fbb2 f3f3 	udiv	r3, r2, r3
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
 800215a:	e004      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	4a0b      	ldr	r2, [pc, #44]	; (800218c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	623b      	str	r3, [r7, #32]
      break;
 800216a:	e002      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_RCC_GetSysClockFreq+0xb8>)
 800216e:	623b      	str	r3, [r7, #32]
      break;
 8002170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002172:	6a3b      	ldr	r3, [r7, #32]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3728      	adds	r7, #40	; 0x28
 8002178:	46bd      	mov	sp, r7
 800217a:	bc90      	pop	{r4, r7}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	08002a04 	.word	0x08002a04
 8002184:	40021000 	.word	0x40021000
 8002188:	007a1200 	.word	0x007a1200
 800218c:	003d0900 	.word	0x003d0900

08002190 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002198:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <RCC_Delay+0x34>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <RCC_Delay+0x38>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	0a5b      	lsrs	r3, r3, #9
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021ac:	bf00      	nop
  }
  while (Delay --);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1e5a      	subs	r2, r3, #1
 80021b2:	60fa      	str	r2, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f9      	bne.n	80021ac <RCC_Delay+0x1c>
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	20000034 	.word	0x20000034
 80021c8:	10624dd3 	.word	0x10624dd3

080021cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e041      	b.n	8002262 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7fe fdf2 	bl	8000ddc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3304      	adds	r3, #4
 8002208:	4619      	mov	r1, r3
 800220a:	4610      	mov	r0, r2
 800220c:	f000 fa6a 	bl	80026e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d001      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e035      	b.n	80022f0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a16      	ldr	r2, [pc, #88]	; (80022fc <HAL_TIM_Base_Start_IT+0x90>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d009      	beq.n	80022ba <HAL_TIM_Base_Start_IT+0x4e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ae:	d004      	beq.n	80022ba <HAL_TIM_Base_Start_IT+0x4e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a12      	ldr	r2, [pc, #72]	; (8002300 <HAL_TIM_Base_Start_IT+0x94>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d111      	bne.n	80022de <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b06      	cmp	r3, #6
 80022ca:	d010      	beq.n	80022ee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022dc:	e007      	b.n	80022ee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0201 	orr.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40012c00 	.word	0x40012c00
 8002300:	40000400 	.word	0x40000400

08002304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b02      	cmp	r3, #2
 8002318:	d122      	bne.n	8002360 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b02      	cmp	r3, #2
 8002326:	d11b      	bne.n	8002360 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0202 	mvn.w	r2, #2
 8002330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f9b1 	bl	80026ae <HAL_TIM_IC_CaptureCallback>
 800234c:	e005      	b.n	800235a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f9a4 	bl	800269c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f9b3 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b04      	cmp	r3, #4
 800236c:	d122      	bne.n	80023b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b04      	cmp	r3, #4
 800237a:	d11b      	bne.n	80023b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0204 	mvn.w	r2, #4
 8002384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2202      	movs	r2, #2
 800238a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f987 	bl	80026ae <HAL_TIM_IC_CaptureCallback>
 80023a0:	e005      	b.n	80023ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f97a 	bl	800269c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f989 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d122      	bne.n	8002408 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d11b      	bne.n	8002408 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0208 	mvn.w	r2, #8
 80023d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2204      	movs	r2, #4
 80023de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f95d 	bl	80026ae <HAL_TIM_IC_CaptureCallback>
 80023f4:	e005      	b.n	8002402 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f950 	bl	800269c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f95f 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b10      	cmp	r3, #16
 8002414:	d122      	bne.n	800245c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b10      	cmp	r3, #16
 8002422:	d11b      	bne.n	800245c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0210 	mvn.w	r2, #16
 800242c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2208      	movs	r2, #8
 8002432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f933 	bl	80026ae <HAL_TIM_IC_CaptureCallback>
 8002448:	e005      	b.n	8002456 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f926 	bl	800269c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f935 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b01      	cmp	r3, #1
 8002468:	d10e      	bne.n	8002488 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d107      	bne.n	8002488 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0201 	mvn.w	r2, #1
 8002480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe fc66 	bl	8000d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002492:	2b80      	cmp	r3, #128	; 0x80
 8002494:	d10e      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a0:	2b80      	cmp	r3, #128	; 0x80
 80024a2:	d107      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fa67 	bl	8002982 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024be:	2b40      	cmp	r3, #64	; 0x40
 80024c0:	d10e      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024cc:	2b40      	cmp	r3, #64	; 0x40
 80024ce:	d107      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f8f9 	bl	80026d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d10e      	bne.n	800250c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	d107      	bne.n	800250c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0220 	mvn.w	r2, #32
 8002504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fa32 	bl	8002970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_TIM_ConfigClockSource+0x18>
 8002528:	2302      	movs	r3, #2
 800252a:	e0b3      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x180>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800254a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002552:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002564:	d03e      	beq.n	80025e4 <HAL_TIM_ConfigClockSource+0xd0>
 8002566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256a:	f200 8087 	bhi.w	800267c <HAL_TIM_ConfigClockSource+0x168>
 800256e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002572:	f000 8085 	beq.w	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257a:	d87f      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x168>
 800257c:	2b70      	cmp	r3, #112	; 0x70
 800257e:	d01a      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0xa2>
 8002580:	2b70      	cmp	r3, #112	; 0x70
 8002582:	d87b      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x168>
 8002584:	2b60      	cmp	r3, #96	; 0x60
 8002586:	d050      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x116>
 8002588:	2b60      	cmp	r3, #96	; 0x60
 800258a:	d877      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x168>
 800258c:	2b50      	cmp	r3, #80	; 0x50
 800258e:	d03c      	beq.n	800260a <HAL_TIM_ConfigClockSource+0xf6>
 8002590:	2b50      	cmp	r3, #80	; 0x50
 8002592:	d873      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x168>
 8002594:	2b40      	cmp	r3, #64	; 0x40
 8002596:	d058      	beq.n	800264a <HAL_TIM_ConfigClockSource+0x136>
 8002598:	2b40      	cmp	r3, #64	; 0x40
 800259a:	d86f      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x168>
 800259c:	2b30      	cmp	r3, #48	; 0x30
 800259e:	d064      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x156>
 80025a0:	2b30      	cmp	r3, #48	; 0x30
 80025a2:	d86b      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x168>
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d060      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x156>
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d867      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x168>
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d05c      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x156>
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d05a      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80025b4:	e062      	b.n	800267c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6899      	ldr	r1, [r3, #8]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f000 f95c 	bl	8002882 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	609a      	str	r2, [r3, #8]
      break;
 80025e2:	e04e      	b.n	8002682 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6899      	ldr	r1, [r3, #8]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f000 f945 	bl	8002882 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002606:	609a      	str	r2, [r3, #8]
      break;
 8002608:	e03b      	b.n	8002682 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6859      	ldr	r1, [r3, #4]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	461a      	mov	r2, r3
 8002618:	f000 f8bc 	bl	8002794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2150      	movs	r1, #80	; 0x50
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f913 	bl	800284e <TIM_ITRx_SetConfig>
      break;
 8002628:	e02b      	b.n	8002682 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6859      	ldr	r1, [r3, #4]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	461a      	mov	r2, r3
 8002638:	f000 f8da 	bl	80027f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2160      	movs	r1, #96	; 0x60
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f903 	bl	800284e <TIM_ITRx_SetConfig>
      break;
 8002648:	e01b      	b.n	8002682 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6859      	ldr	r1, [r3, #4]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	461a      	mov	r2, r3
 8002658:	f000 f89c 	bl	8002794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2140      	movs	r1, #64	; 0x40
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f8f3 	bl	800284e <TIM_ITRx_SetConfig>
      break;
 8002668:	e00b      	b.n	8002682 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	4610      	mov	r0, r2
 8002676:	f000 f8ea 	bl	800284e <TIM_ITRx_SetConfig>
        break;
 800267a:	e002      	b.n	8002682 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800267c:	bf00      	nop
 800267e:	e000      	b.n	8002682 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002680:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a25      	ldr	r2, [pc, #148]	; (800278c <TIM_Base_SetConfig+0xa8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d007      	beq.n	800270c <TIM_Base_SetConfig+0x28>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002702:	d003      	beq.n	800270c <TIM_Base_SetConfig+0x28>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a22      	ldr	r2, [pc, #136]	; (8002790 <TIM_Base_SetConfig+0xac>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d108      	bne.n	800271e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a1a      	ldr	r2, [pc, #104]	; (800278c <TIM_Base_SetConfig+0xa8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <TIM_Base_SetConfig+0x52>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272c:	d003      	beq.n	8002736 <TIM_Base_SetConfig+0x52>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a17      	ldr	r2, [pc, #92]	; (8002790 <TIM_Base_SetConfig+0xac>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d108      	bne.n	8002748 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800273c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a07      	ldr	r2, [pc, #28]	; (800278c <TIM_Base_SetConfig+0xa8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d103      	bne.n	800277c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	615a      	str	r2, [r3, #20]
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	40012c00 	.word	0x40012c00
 8002790:	40000400 	.word	0x40000400

08002794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	f023 0201 	bic.w	r2, r3, #1
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f023 030a 	bic.w	r3, r3, #10
 80027d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	621a      	str	r2, [r3, #32]
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f023 0210 	bic.w	r2, r3, #16
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800281a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	031b      	lsls	r3, r3, #12
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	4313      	orrs	r3, r2
 8002824:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800282c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	621a      	str	r2, [r3, #32]
}
 8002844:	bf00      	nop
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	f043 0307 	orr.w	r3, r3, #7
 8002870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	609a      	str	r2, [r3, #8]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002882:	b480      	push	{r7}
 8002884:	b087      	sub	sp, #28
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800289c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	021a      	lsls	r2, r3, #8
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	609a      	str	r2, [r3, #8]
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e041      	b.n	800295c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a14      	ldr	r2, [pc, #80]	; (8002968 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d009      	beq.n	8002930 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002924:	d004      	beq.n	8002930 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a10      	ldr	r2, [pc, #64]	; (800296c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d10c      	bne.n	800294a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002936:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	4313      	orrs	r3, r2
 8002940:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40000400 	.word	0x40000400

08002970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr

08002982 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <__libc_init_array>:
 8002994:	b570      	push	{r4, r5, r6, lr}
 8002996:	2600      	movs	r6, #0
 8002998:	4d0c      	ldr	r5, [pc, #48]	; (80029cc <__libc_init_array+0x38>)
 800299a:	4c0d      	ldr	r4, [pc, #52]	; (80029d0 <__libc_init_array+0x3c>)
 800299c:	1b64      	subs	r4, r4, r5
 800299e:	10a4      	asrs	r4, r4, #2
 80029a0:	42a6      	cmp	r6, r4
 80029a2:	d109      	bne.n	80029b8 <__libc_init_array+0x24>
 80029a4:	f000 f822 	bl	80029ec <_init>
 80029a8:	2600      	movs	r6, #0
 80029aa:	4d0a      	ldr	r5, [pc, #40]	; (80029d4 <__libc_init_array+0x40>)
 80029ac:	4c0a      	ldr	r4, [pc, #40]	; (80029d8 <__libc_init_array+0x44>)
 80029ae:	1b64      	subs	r4, r4, r5
 80029b0:	10a4      	asrs	r4, r4, #2
 80029b2:	42a6      	cmp	r6, r4
 80029b4:	d105      	bne.n	80029c2 <__libc_init_array+0x2e>
 80029b6:	bd70      	pop	{r4, r5, r6, pc}
 80029b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029bc:	4798      	blx	r3
 80029be:	3601      	adds	r6, #1
 80029c0:	e7ee      	b.n	80029a0 <__libc_init_array+0xc>
 80029c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c6:	4798      	blx	r3
 80029c8:	3601      	adds	r6, #1
 80029ca:	e7f2      	b.n	80029b2 <__libc_init_array+0x1e>
 80029cc:	08002a24 	.word	0x08002a24
 80029d0:	08002a24 	.word	0x08002a24
 80029d4:	08002a24 	.word	0x08002a24
 80029d8:	08002a28 	.word	0x08002a28

080029dc <memset>:
 80029dc:	4603      	mov	r3, r0
 80029de:	4402      	add	r2, r0
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d100      	bne.n	80029e6 <memset+0xa>
 80029e4:	4770      	bx	lr
 80029e6:	f803 1b01 	strb.w	r1, [r3], #1
 80029ea:	e7f9      	b.n	80029e0 <memset+0x4>

080029ec <_init>:
 80029ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ee:	bf00      	nop
 80029f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f2:	bc08      	pop	{r3}
 80029f4:	469e      	mov	lr, r3
 80029f6:	4770      	bx	lr

080029f8 <_fini>:
 80029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fa:	bf00      	nop
 80029fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fe:	bc08      	pop	{r3}
 8002a00:	469e      	mov	lr, r3
 8002a02:	4770      	bx	lr
